
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.209
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSetArchetypes
    Inherits DataSet
    
    Private tableqryArchetypeListWithParents As qryArchetypeListWithParentsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("qryArchetypeListWithParents")) Is Nothing) Then
                Me.Tables.Add(New qryArchetypeListWithParentsDataTable(ds.Tables("qryArchetypeListWithParents")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryArchetypeListWithParents As qryArchetypeListWithParentsDataTable
        Get
            Return Me.tableqryArchetypeListWithParents
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSetArchetypes = CType(MyBase.Clone,DataSetArchetypes)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("qryArchetypeListWithParents")) Is Nothing) Then
            Me.Tables.Add(New qryArchetypeListWithParentsDataTable(ds.Tables("qryArchetypeListWithParents")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Public Sub InitVars()
        Me.tableqryArchetypeListWithParents = CType(Me.Tables("qryArchetypeListWithParents"),qryArchetypeListWithParentsDataTable)
        If (Not (Me.tableqryArchetypeListWithParents) Is Nothing) Then
            Me.tableqryArchetypeListWithParents.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSetArchetypes"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSetArchetypes.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-AU")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableqryArchetypeListWithParents = New qryArchetypeListWithParentsDataTable
        Me.Tables.Add(Me.tableqryArchetypeListWithParents)
    End Sub
    
    Private Function ShouldSerializeqryArchetypeListWithParents() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub qryArchetypeListWithParentsRowChangeEventHandler(ByVal sender As Object, ByVal e As qryArchetypeListWithParentsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryArchetypeListWithParentsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column_Class As DataColumn
        
        Private columnConcept As DataColumn
        
        Private columnName As DataColumn
        
        Private columnParent As DataColumn
        
        Public Sub New()
            MyBase.New("qryArchetypeListWithParents")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property _ClassColumn As DataColumn
            Get
                Return Me.column_Class
            End Get
        End Property
        
        Friend ReadOnly Property ConceptColumn As DataColumn
            Get
                Return Me.columnConcept
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property ParentColumn As DataColumn
            Get
                Return Me.columnParent
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryArchetypeListWithParentsRow
            Get
                Return CType(Me.Rows(index),qryArchetypeListWithParentsRow)
            End Get
        End Property
        
        Public Event qryArchetypeListWithParentsRowChanged As qryArchetypeListWithParentsRowChangeEventHandler
        
        Public Event qryArchetypeListWithParentsRowChanging As qryArchetypeListWithParentsRowChangeEventHandler
        
        Public Event qryArchetypeListWithParentsRowDeleted As qryArchetypeListWithParentsRowChangeEventHandler
        
        Public Event qryArchetypeListWithParentsRowDeleting As qryArchetypeListWithParentsRowChangeEventHandler
        
        Public Overloads Sub AddqryArchetypeListWithParentsRow(ByVal row As qryArchetypeListWithParentsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryArchetypeListWithParentsRow(ByVal _Class As String, ByVal Concept As String, ByVal Name As String, ByVal Parent As String) As qryArchetypeListWithParentsRow
            Dim rowqryArchetypeListWithParentsRow As qryArchetypeListWithParentsRow = CType(Me.NewRow,qryArchetypeListWithParentsRow)
            rowqryArchetypeListWithParentsRow.ItemArray = New Object() {_Class, Concept, Name, Parent}
            Me.Rows.Add(rowqryArchetypeListWithParentsRow)
            Return rowqryArchetypeListWithParentsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryArchetypeListWithParentsDataTable = CType(MyBase.Clone,qryArchetypeListWithParentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryArchetypeListWithParentsDataTable
        End Function
        
        Public Sub InitVars()
            Me.column_Class = Me.Columns("Class")
            Me.columnConcept = Me.Columns("Concept")
            Me.columnName = Me.Columns("Name")
            Me.columnParent = Me.Columns("Parent")
        End Sub
        
        Private Sub InitClass()
            Me.column_Class = New DataColumn("Class", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Class)
            Me.columnConcept = New DataColumn("Concept", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConcept)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnParent = New DataColumn("Parent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnParent)
        End Sub
        
        Public Function NewqryArchetypeListWithParentsRow() As qryArchetypeListWithParentsRow
            Return CType(Me.NewRow,qryArchetypeListWithParentsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryArchetypeListWithParentsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryArchetypeListWithParentsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryArchetypeListWithParentsRowChangedEvent) Is Nothing) Then
                RaiseEvent qryArchetypeListWithParentsRowChanged(Me, New qryArchetypeListWithParentsRowChangeEvent(CType(e.Row,qryArchetypeListWithParentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryArchetypeListWithParentsRowChangingEvent) Is Nothing) Then
                RaiseEvent qryArchetypeListWithParentsRowChanging(Me, New qryArchetypeListWithParentsRowChangeEvent(CType(e.Row,qryArchetypeListWithParentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryArchetypeListWithParentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryArchetypeListWithParentsRowDeleted(Me, New qryArchetypeListWithParentsRowChangeEvent(CType(e.Row,qryArchetypeListWithParentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryArchetypeListWithParentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryArchetypeListWithParentsRowDeleting(Me, New qryArchetypeListWithParentsRowChangeEvent(CType(e.Row,qryArchetypeListWithParentsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryArchetypeListWithParentsRow(ByVal row As qryArchetypeListWithParentsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryArchetypeListWithParentsRow
        Inherits DataRow
        
        Private tableqryArchetypeListWithParents As qryArchetypeListWithParentsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryArchetypeListWithParents = CType(Me.Table,qryArchetypeListWithParentsDataTable)
        End Sub
        
        Public Property _Class As String
            Get
                Try 
                    Return CType(Me(Me.tableqryArchetypeListWithParents._ClassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryArchetypeListWithParents._ClassColumn) = value
            End Set
        End Property
        
        Public Property Concept As String
            Get
                Try 
                    Return CType(Me(Me.tableqryArchetypeListWithParents.ConceptColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryArchetypeListWithParents.ConceptColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableqryArchetypeListWithParents.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryArchetypeListWithParents.NameColumn) = value
            End Set
        End Property
        
        Public Property Parent As String
            Get
                Try 
                    Return CType(Me(Me.tableqryArchetypeListWithParents.ParentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryArchetypeListWithParents.ParentColumn) = value
            End Set
        End Property
        
        Public Function Is_ClassNull() As Boolean
            Return Me.IsNull(Me.tableqryArchetypeListWithParents._ClassColumn)
        End Function
        
        Public Sub Set_ClassNull()
            Me(Me.tableqryArchetypeListWithParents._ClassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConceptNull() As Boolean
            Return Me.IsNull(Me.tableqryArchetypeListWithParents.ConceptColumn)
        End Function
        
        Public Sub SetConceptNull()
            Me(Me.tableqryArchetypeListWithParents.ConceptColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableqryArchetypeListWithParents.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableqryArchetypeListWithParents.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsParentNull() As Boolean
            Return Me.IsNull(Me.tableqryArchetypeListWithParents.ParentColumn)
        End Function
        
        Public Sub SetParentNull()
            Me(Me.tableqryArchetypeListWithParents.ParentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryArchetypeListWithParentsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryArchetypeListWithParentsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryArchetypeListWithParentsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryArchetypeListWithParentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
