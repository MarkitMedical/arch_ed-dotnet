<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Language" content="en-au">
  <meta http-equiv="Content-Type"
 content="text/html; charset=windows-1252">
  <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
  <meta name="ProgId" content="FrontPage.Editor.Document">
  <title>Terminology and archetypes</title>
</head>
<body>
<h1>Terminology and archetypes</h1>
<p>The <i>open</i>EHR Archetype System has been designed to enable
interoperability of health information. It is a new approach to a very
old
problem. To share information (for computers rather than humans) you
need to
share two things - a schema or rules for how the information is stored,
and a
domain vocabulary for each point in the schema. EHR Systems do this for
keeping
track of things even within one site. The problem has been that the
needs of
different EHR-S systems means that the schema have to differ, and as it
is not
possible - using traditional methods - to agree on a schema we are left
with the
problem of developing a collective domain vocabulary for the entire
system -
rather than for any particular data point.</p>
<p>The <i>open</i>EHR approach is to have a single logical schema for
all
systems - highly attuned to the European approach (CEN 13606) - which
allows
storage and retrieval of potentially infinitely complex information.
You never
know what you might need! This means that everyone can receive data (as
atomic
information - not text) from everyone else - guaranteed. To add meaning
to the
data, it must conform to a second 'schema' or set of rules - held in
files which
can be shared - called 'archetypes'. That is what you are building when
you use
this tool. For computers to <i>understand</i> the data it must be
compliant with
at least one archetype (I say at least one, as specialisation of
archetypes
means that all data compliant with a parent may also be compliant with
a 'child'
archetype.</p>
<p>This simplifies the requirements for terminology, as we now have
shared data
points that require a specific vocabulary. Often it is appropriate to
describe
these within the archetype itself - as there is no useful
classification of
small domain vocabularies used for one data point. This has a number of
advantages:</p>
<ul>
  <li>The domain vocabularies can be safely translated as it is quite
clear what the context of the term is within the archetype (a problem
not yet faced by large terminologies)</li>
  <li>These vocabularies can be 'bound' to the different terminologies
used within systems - and there are a lot out there</li>
  <li>All of these things can be done post hoc - or after the fact -
that is to say, there is no need to have access to a terminology to
create an archetype</li>
</ul>
<p>Terminologies may contain knowledge and some data points within an
archetype
should point (via a constraint definition and binding) to an external
terminology. Obvious examples are diagnosis and body site - one problem
being
that even the later is not well catered for in terminologies.</p>
<p>Related topics: <a href="../HowTo/add_term_binding.htm">Binding a
term to a
terminology</a>; <a href="constraint_binding.htm">Constraint
definitions and bindings</a>; <a href="archetype_paths.html">Archetype
paths</a>.<br>
</p>
</body>
</html>
