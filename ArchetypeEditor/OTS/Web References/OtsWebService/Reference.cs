//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3615.
// 
#pragma warning disable 1591

namespace Ots.OtsWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OTSWebServiceSoap", Namespace="http://oceaninformatics.biz/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SourceSetBinding))]
    public partial class OTSWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTerminologiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultTerminologyProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTerminologyProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultTerminologyProviderNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegisteredQueriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelEvaluationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnRegisterAllQueriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryRegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryRegisterSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryIsRegisteredOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryUnRegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionRegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionSaveDefinitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionRegisterSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionUnRegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetUnRegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryImportLatestResultSubsetOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryExportLatestResultSubsetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetExportOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryOpenOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryOpenPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryTermSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetFullTermOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryTextSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryTextSearchPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryTextSearchAnyOrderPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGoDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGoDownPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGoUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGoUpPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGetTermsForConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGetTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGetLatestResultSubsetIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGetLatestVersionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGetVersionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryGetSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionSetLockedStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionGetDefaultBindingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionEvaluateOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionOpenOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionOpenPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionGoDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionGoDownPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionGoUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionGoUpPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionTextSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionTextSearchPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionTextSearchAnyOrderPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionTermSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionGetSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionGetLatestResultSubsetIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryVersionGetTermsForConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetOpenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetGoDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetGoUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetTextSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetGoDownPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetGoUpPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetTextSearchPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetTextSearchAnyOrderPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetOpenPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetTermSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultSubsetGetTermsForConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyOpenOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyOpenPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGoDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGoDownPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGoUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGoUpPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyTextSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyTextSearchPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetConceptDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetConceptsAndPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetConceptForTermOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyRelationshipGoDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyRelationshipGoDownPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyRelationshipGoUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyRelationshipGoUpPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetTraversalDirectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetRelationshipsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetConceptRegExpMaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetLanguagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetTerminologyProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetAllTerminologyMappingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetConceptMappingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetFullTermsForConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetFullTermOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetTermsForConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetPreferredTermsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyGetPreferredTermTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyIsTermInTermHierarchyOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyIsTermInConceptHierarchyOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyIsConceptInConceptHierarchyOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGoDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGoDownPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGoUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGoUpPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderRelationshipGoDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderRelationshipGoDownPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderRelationshipGoUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderRelationshipGoUpPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderOpenOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderOpenPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetConceptDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetConceptsAndPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetConceptForTermOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetLanguagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderTextSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderTextSearchPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetTermsForConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetConceptMappingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetFullTermsForConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetPreferredTermTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetRelationshipsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderGetPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderIsTermInTermHierarchyOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderIsTermInConceptHierarchyOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyProviderIsConceptInConceptHierarchyOperationCompleted;
        
        private System.Threading.SendOrPostCallback dummyQueryNavigationNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAvailableOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserDomainNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenQueryPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GoDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback GoDownPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GoUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GoUpPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TextSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback TextSearchPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyBrowserGetConceptDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyBrowserOpenOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyBrowserOpenPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyBrowserGoDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyBrowserGoDownPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyBrowserGoUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyBrowserGoUpPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyBrowserTextSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminologyBrowserTextSearchPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuerySourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTermsForQueryConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryVersionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnRegisterQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnRegisterQueryVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnRegisterResultSubsetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTermsForConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTerminologyProviderPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTerminologyProviderRelationshipsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTerminologyProviderTermsForConceptOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTerminologyProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTerminologyRelationshipsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OTSWebService() {
            this.Url = global::Ots.Properties.Settings.Default.Ots_OtsWebService_OTSWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTerminologiesCompletedEventHandler GetTerminologiesCompleted;
        
        /// <remarks/>
        public event GetDefaultTerminologyProvidersCompletedEventHandler GetDefaultTerminologyProvidersCompleted;
        
        /// <remarks/>
        public event GetAllTerminologyProvidersCompletedEventHandler GetAllTerminologyProvidersCompleted;
        
        /// <remarks/>
        public event GetDefaultTerminologyProviderNameCompletedEventHandler GetDefaultTerminologyProviderNameCompleted;
        
        /// <remarks/>
        public event GetRegisteredQueriesCompletedEventHandler GetRegisteredQueriesCompleted;
        
        /// <remarks/>
        public event CancelRegistrationCompletedEventHandler CancelRegistrationCompleted;
        
        /// <remarks/>
        public event CancelEvaluationCompletedEventHandler CancelEvaluationCompleted;
        
        /// <remarks/>
        public event UnRegisterAllQueriesCompletedEventHandler UnRegisterAllQueriesCompleted;
        
        /// <remarks/>
        public event QueryRegisterCompletedEventHandler QueryRegisterCompleted;
        
        /// <remarks/>
        public event QueryRegisterSourceCompletedEventHandler QueryRegisterSourceCompleted;
        
        /// <remarks/>
        public event QueryIsRegisteredCompletedEventHandler QueryIsRegisteredCompleted;
        
        /// <remarks/>
        public event QueryUnRegisterCompletedEventHandler QueryUnRegisterCompleted;
        
        /// <remarks/>
        public event QueryVersionRegisterCompletedEventHandler QueryVersionRegisterCompleted;
        
        /// <remarks/>
        public event QueryVersionSaveDefinitionCompletedEventHandler QueryVersionSaveDefinitionCompleted;
        
        /// <remarks/>
        public event QueryVersionRegisterSourceCompletedEventHandler QueryVersionRegisterSourceCompleted;
        
        /// <remarks/>
        public event QueryVersionUnRegisterCompletedEventHandler QueryVersionUnRegisterCompleted;
        
        /// <remarks/>
        public event ResultSubsetUnRegisterCompletedEventHandler ResultSubsetUnRegisterCompleted;
        
        /// <remarks/>
        public event QueryImportLatestResultSubsetCompletedEventHandler QueryImportLatestResultSubsetCompleted;
        
        /// <remarks/>
        public event QueryExportLatestResultSubsetCompletedEventHandler QueryExportLatestResultSubsetCompleted;
        
        /// <remarks/>
        public event ResultSubsetExportCompletedEventHandler ResultSubsetExportCompleted;
        
        /// <remarks/>
        public event QueryOpenCompletedEventHandler QueryOpenCompleted;
        
        /// <remarks/>
        public event QueryOpenPagedCompletedEventHandler QueryOpenPagedCompleted;
        
        /// <remarks/>
        public event QueryTermSearchCompletedEventHandler QueryTermSearchCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetFullTermCompletedEventHandler TerminologyProviderGetFullTermCompleted;
        
        /// <remarks/>
        public event QueryTextSearchCompletedEventHandler QueryTextSearchCompleted;
        
        /// <remarks/>
        public event QueryTextSearchPagedCompletedEventHandler QueryTextSearchPagedCompleted;
        
        /// <remarks/>
        public event QueryTextSearchAnyOrderPagedCompletedEventHandler QueryTextSearchAnyOrderPagedCompleted;
        
        /// <remarks/>
        public event QueryGoDownCompletedEventHandler QueryGoDownCompleted;
        
        /// <remarks/>
        public event QueryGoDownPagedCompletedEventHandler QueryGoDownPagedCompleted;
        
        /// <remarks/>
        public event QueryGoUpCompletedEventHandler QueryGoUpCompleted;
        
        /// <remarks/>
        public event QueryGoUpPagedCompletedEventHandler QueryGoUpPagedCompleted;
        
        /// <remarks/>
        public event QueryGetTermsForConceptCompletedEventHandler QueryGetTermsForConceptCompleted;
        
        /// <remarks/>
        public event QueryGetTreeCompletedEventHandler QueryGetTreeCompleted;
        
        /// <remarks/>
        public event QueryGetLatestResultSubsetIdCompletedEventHandler QueryGetLatestResultSubsetIdCompleted;
        
        /// <remarks/>
        public event QueryGetLatestVersionIdCompletedEventHandler QueryGetLatestVersionIdCompleted;
        
        /// <remarks/>
        public event QueryGetVersionsCompletedEventHandler QueryGetVersionsCompleted;
        
        /// <remarks/>
        public event QueryGetSourceCompletedEventHandler QueryGetSourceCompleted;
        
        /// <remarks/>
        public event QueryVersionSetLockedStatusCompletedEventHandler QueryVersionSetLockedStatusCompleted;
        
        /// <remarks/>
        public event QueryVersionGetDefaultBindingsCompletedEventHandler QueryVersionGetDefaultBindingsCompleted;
        
        /// <remarks/>
        public event QueryVersionEvaluateCompletedEventHandler QueryVersionEvaluateCompleted;
        
        /// <remarks/>
        public event QueryVersionOpenCompletedEventHandler QueryVersionOpenCompleted;
        
        /// <remarks/>
        public event QueryVersionOpenPagedCompletedEventHandler QueryVersionOpenPagedCompleted;
        
        /// <remarks/>
        public event QueryVersionGoDownCompletedEventHandler QueryVersionGoDownCompleted;
        
        /// <remarks/>
        public event QueryVersionGoDownPagedCompletedEventHandler QueryVersionGoDownPagedCompleted;
        
        /// <remarks/>
        public event QueryVersionGoUpCompletedEventHandler QueryVersionGoUpCompleted;
        
        /// <remarks/>
        public event QueryVersionGoUpPagedCompletedEventHandler QueryVersionGoUpPagedCompleted;
        
        /// <remarks/>
        public event QueryVersionTextSearchCompletedEventHandler QueryVersionTextSearchCompleted;
        
        /// <remarks/>
        public event QueryVersionTextSearchPagedCompletedEventHandler QueryVersionTextSearchPagedCompleted;
        
        /// <remarks/>
        public event QueryVersionTextSearchAnyOrderPagedCompletedEventHandler QueryVersionTextSearchAnyOrderPagedCompleted;
        
        /// <remarks/>
        public event QueryVersionTermSearchCompletedEventHandler QueryVersionTermSearchCompleted;
        
        /// <remarks/>
        public event QueryVersionGetSourceCompletedEventHandler QueryVersionGetSourceCompleted;
        
        /// <remarks/>
        public event QueryVersionGetLatestResultSubsetIdCompletedEventHandler QueryVersionGetLatestResultSubsetIdCompleted;
        
        /// <remarks/>
        public event QueryVersionGetTermsForConceptCompletedEventHandler QueryVersionGetTermsForConceptCompleted;
        
        /// <remarks/>
        public event ResultSubsetOpenCompletedEventHandler ResultSubsetOpenCompleted;
        
        /// <remarks/>
        public event ResultSubsetGoDownCompletedEventHandler ResultSubsetGoDownCompleted;
        
        /// <remarks/>
        public event ResultSubsetGoUpCompletedEventHandler ResultSubsetGoUpCompleted;
        
        /// <remarks/>
        public event ResultSubsetTextSearchCompletedEventHandler ResultSubsetTextSearchCompleted;
        
        /// <remarks/>
        public event ResultSubsetGoDownPagedCompletedEventHandler ResultSubsetGoDownPagedCompleted;
        
        /// <remarks/>
        public event ResultSubsetGoUpPagedCompletedEventHandler ResultSubsetGoUpPagedCompleted;
        
        /// <remarks/>
        public event ResultSubsetTextSearchPagedCompletedEventHandler ResultSubsetTextSearchPagedCompleted;
        
        /// <remarks/>
        public event ResultSubsetTextSearchAnyOrderPagedCompletedEventHandler ResultSubsetTextSearchAnyOrderPagedCompleted;
        
        /// <remarks/>
        public event ResultSubsetOpenPagedCompletedEventHandler ResultSubsetOpenPagedCompleted;
        
        /// <remarks/>
        public event ResultSubsetTermSearchCompletedEventHandler ResultSubsetTermSearchCompleted;
        
        /// <remarks/>
        public event ResultSubsetGetTermsForConceptCompletedEventHandler ResultSubsetGetTermsForConceptCompleted;
        
        /// <remarks/>
        public event TerminologyOpenCompletedEventHandler TerminologyOpenCompleted;
        
        /// <remarks/>
        public event TerminologyOpenPagedCompletedEventHandler TerminologyOpenPagedCompleted;
        
        /// <remarks/>
        public event TerminologyGoDownCompletedEventHandler TerminologyGoDownCompleted;
        
        /// <remarks/>
        public event TerminologyGoDownPagedCompletedEventHandler TerminologyGoDownPagedCompleted;
        
        /// <remarks/>
        public event TerminologyGoUpCompletedEventHandler TerminologyGoUpCompleted;
        
        /// <remarks/>
        public event TerminologyGoUpPagedCompletedEventHandler TerminologyGoUpPagedCompleted;
        
        /// <remarks/>
        public event TerminologyTextSearchCompletedEventHandler TerminologyTextSearchCompleted;
        
        /// <remarks/>
        public event TerminologyTextSearchPagedCompletedEventHandler TerminologyTextSearchPagedCompleted;
        
        /// <remarks/>
        public event TerminologyGetConceptDetailsCompletedEventHandler TerminologyGetConceptDetailsCompleted;
        
        /// <remarks/>
        public event TerminologyGetConceptsAndPropertiesCompletedEventHandler TerminologyGetConceptsAndPropertiesCompleted;
        
        /// <remarks/>
        public event TerminologyGetConceptForTermCompletedEventHandler TerminologyGetConceptForTermCompleted;
        
        /// <remarks/>
        public event TerminologyRelationshipGoDownCompletedEventHandler TerminologyRelationshipGoDownCompleted;
        
        /// <remarks/>
        public event TerminologyRelationshipGoDownPagedCompletedEventHandler TerminologyRelationshipGoDownPagedCompleted;
        
        /// <remarks/>
        public event TerminologyRelationshipGoUpCompletedEventHandler TerminologyRelationshipGoUpCompleted;
        
        /// <remarks/>
        public event TerminologyRelationshipGoUpPagedCompletedEventHandler TerminologyRelationshipGoUpPagedCompleted;
        
        /// <remarks/>
        public event TerminologyGetTraversalDirectionCompletedEventHandler TerminologyGetTraversalDirectionCompleted;
        
        /// <remarks/>
        public event TerminologyGetRelationshipsCompletedEventHandler TerminologyGetRelationshipsCompleted;
        
        /// <remarks/>
        public event TerminologyGetConceptRegExpMaskCompletedEventHandler TerminologyGetConceptRegExpMaskCompleted;
        
        /// <remarks/>
        public event TerminologyGetPropertiesCompletedEventHandler TerminologyGetPropertiesCompleted;
        
        /// <remarks/>
        public event TerminologyGetLanguagesCompletedEventHandler TerminologyGetLanguagesCompleted;
        
        /// <remarks/>
        public event TerminologyGetTerminologyProvidersCompletedEventHandler TerminologyGetTerminologyProvidersCompleted;
        
        /// <remarks/>
        public event TerminologyGetAllTerminologyMappingsCompletedEventHandler TerminologyGetAllTerminologyMappingsCompleted;
        
        /// <remarks/>
        public event TerminologyGetConceptMappingsCompletedEventHandler TerminologyGetConceptMappingsCompleted;
        
        /// <remarks/>
        public event TerminologyGetFullTermsForConceptCompletedEventHandler TerminologyGetFullTermsForConceptCompleted;
        
        /// <remarks/>
        public event TerminologyGetFullTermCompletedEventHandler TerminologyGetFullTermCompleted;
        
        /// <remarks/>
        public event TerminologyGetTermsForConceptCompletedEventHandler TerminologyGetTermsForConceptCompleted;
        
        /// <remarks/>
        public event TerminologyGetPreferredTermsCompletedEventHandler TerminologyGetPreferredTermsCompleted;
        
        /// <remarks/>
        public event TerminologyGetPreferredTermTextCompletedEventHandler TerminologyGetPreferredTermTextCompleted;
        
        /// <remarks/>
        public event TerminologyIsTermInTermHierarchyCompletedEventHandler TerminologyIsTermInTermHierarchyCompleted;
        
        /// <remarks/>
        public event TerminologyIsTermInConceptHierarchyCompletedEventHandler TerminologyIsTermInConceptHierarchyCompleted;
        
        /// <remarks/>
        public event TerminologyIsConceptInConceptHierarchyCompletedEventHandler TerminologyIsConceptInConceptHierarchyCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGoDownCompletedEventHandler TerminologyProviderGoDownCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGoDownPagedCompletedEventHandler TerminologyProviderGoDownPagedCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGoUpCompletedEventHandler TerminologyProviderGoUpCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGoUpPagedCompletedEventHandler TerminologyProviderGoUpPagedCompleted;
        
        /// <remarks/>
        public event TerminologyProviderRelationshipGoDownCompletedEventHandler TerminologyProviderRelationshipGoDownCompleted;
        
        /// <remarks/>
        public event TerminologyProviderRelationshipGoDownPagedCompletedEventHandler TerminologyProviderRelationshipGoDownPagedCompleted;
        
        /// <remarks/>
        public event TerminologyProviderRelationshipGoUpCompletedEventHandler TerminologyProviderRelationshipGoUpCompleted;
        
        /// <remarks/>
        public event TerminologyProviderRelationshipGoUpPagedCompletedEventHandler TerminologyProviderRelationshipGoUpPagedCompleted;
        
        /// <remarks/>
        public event TerminologyProviderOpenCompletedEventHandler TerminologyProviderOpenCompleted;
        
        /// <remarks/>
        public event TerminologyProviderOpenPagedCompletedEventHandler TerminologyProviderOpenPagedCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetConceptDetailsCompletedEventHandler TerminologyProviderGetConceptDetailsCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetConceptsAndPropertiesCompletedEventHandler TerminologyProviderGetConceptsAndPropertiesCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetConceptForTermCompletedEventHandler TerminologyProviderGetConceptForTermCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetLanguagesCompletedEventHandler TerminologyProviderGetLanguagesCompleted;
        
        /// <remarks/>
        public event TerminologyProviderTextSearchCompletedEventHandler TerminologyProviderTextSearchCompleted;
        
        /// <remarks/>
        public event TerminologyProviderTextSearchPagedCompletedEventHandler TerminologyProviderTextSearchPagedCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetTermsForConceptCompletedEventHandler TerminologyProviderGetTermsForConceptCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetConceptMappingsCompletedEventHandler TerminologyProviderGetConceptMappingsCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetFullTermsForConceptCompletedEventHandler TerminologyProviderGetFullTermsForConceptCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetPreferredTermTextCompletedEventHandler TerminologyProviderGetPreferredTermTextCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetRelationshipsCompletedEventHandler TerminologyProviderGetRelationshipsCompleted;
        
        /// <remarks/>
        public event TerminologyProviderGetPropertiesCompletedEventHandler TerminologyProviderGetPropertiesCompleted;
        
        /// <remarks/>
        public event TerminologyProviderIsTermInTermHierarchyCompletedEventHandler TerminologyProviderIsTermInTermHierarchyCompleted;
        
        /// <remarks/>
        public event TerminologyProviderIsTermInConceptHierarchyCompletedEventHandler TerminologyProviderIsTermInConceptHierarchyCompleted;
        
        /// <remarks/>
        public event TerminologyProviderIsConceptInConceptHierarchyCompletedEventHandler TerminologyProviderIsConceptInConceptHierarchyCompleted;
        
        /// <remarks/>
        public event dummyQueryNavigationNodeCompletedEventHandler dummyQueryNavigationNodeCompleted;
        
        /// <remarks/>
        public event IsAvailableCompletedEventHandler IsAvailableCompleted;
        
        /// <remarks/>
        public event UserNameCompletedEventHandler UserNameCompleted;
        
        /// <remarks/>
        public event UserDomainNameCompletedEventHandler UserDomainNameCompleted;
        
        /// <remarks/>
        public event OpenQueryCompletedEventHandler OpenQueryCompleted;
        
        /// <remarks/>
        public event OpenQueryPagedCompletedEventHandler OpenQueryPagedCompleted;
        
        /// <remarks/>
        public event GoDownCompletedEventHandler GoDownCompleted;
        
        /// <remarks/>
        public event GoDownPagedCompletedEventHandler GoDownPagedCompleted;
        
        /// <remarks/>
        public event GoUpCompletedEventHandler GoUpCompleted;
        
        /// <remarks/>
        public event GoUpPagedCompletedEventHandler GoUpPagedCompleted;
        
        /// <remarks/>
        public event TextSearchCompletedEventHandler TextSearchCompleted;
        
        /// <remarks/>
        public event TextSearchPagedCompletedEventHandler TextSearchPagedCompleted;
        
        /// <remarks/>
        public event TerminologyBrowserGetConceptDetailsCompletedEventHandler TerminologyBrowserGetConceptDetailsCompleted;
        
        /// <remarks/>
        public event TerminologyBrowserOpenCompletedEventHandler TerminologyBrowserOpenCompleted;
        
        /// <remarks/>
        public event TerminologyBrowserOpenPagedCompletedEventHandler TerminologyBrowserOpenPagedCompleted;
        
        /// <remarks/>
        public event TerminologyBrowserGoDownCompletedEventHandler TerminologyBrowserGoDownCompleted;
        
        /// <remarks/>
        public event TerminologyBrowserGoDownPagedCompletedEventHandler TerminologyBrowserGoDownPagedCompleted;
        
        /// <remarks/>
        public event TerminologyBrowserGoUpCompletedEventHandler TerminologyBrowserGoUpCompleted;
        
        /// <remarks/>
        public event TerminologyBrowserGoUpPagedCompletedEventHandler TerminologyBrowserGoUpPagedCompleted;
        
        /// <remarks/>
        public event TerminologyBrowserTextSearchCompletedEventHandler TerminologyBrowserTextSearchCompleted;
        
        /// <remarks/>
        public event TerminologyBrowserTextSearchPagedCompletedEventHandler TerminologyBrowserTextSearchPagedCompleted;
        
        /// <remarks/>
        public event GetQuerySourceCompletedEventHandler GetQuerySourceCompleted;
        
        /// <remarks/>
        public event GetTermsForQueryConceptCompletedEventHandler GetTermsForQueryConceptCompleted;
        
        /// <remarks/>
        public event GetQueryVersionsCompletedEventHandler GetQueryVersionsCompleted;
        
        /// <remarks/>
        public event RegisterQueryCompletedEventHandler RegisterQueryCompleted;
        
        /// <remarks/>
        public event UnRegisterQueryCompletedEventHandler UnRegisterQueryCompleted;
        
        /// <remarks/>
        public event UnRegisterQueryVersionCompletedEventHandler UnRegisterQueryVersionCompleted;
        
        /// <remarks/>
        public event UnRegisterResultSubsetCompletedEventHandler UnRegisterResultSubsetCompleted;
        
        /// <remarks/>
        public event GetTermsForConceptCompletedEventHandler GetTermsForConceptCompleted;
        
        /// <remarks/>
        public event GetTerminologyProviderPropertiesCompletedEventHandler GetTerminologyProviderPropertiesCompleted;
        
        /// <remarks/>
        public event GetTerminologyProviderRelationshipsCompletedEventHandler GetTerminologyProviderRelationshipsCompleted;
        
        /// <remarks/>
        public event GetTerminologyProviderTermsForConceptCompletedEventHandler GetTerminologyProviderTermsForConceptCompleted;
        
        /// <remarks/>
        public event GetTerminologyProvidersCompletedEventHandler GetTerminologyProvidersCompleted;
        
        /// <remarks/>
        public event GetTerminologyRelationshipsCompletedEventHandler GetTerminologyRelationshipsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetTerminologies", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetTerminologies(out string defaultTerminology) {
            object[] results = this.Invoke("GetTerminologies", new object[0]);
            defaultTerminology = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTerminologiesAsync() {
            this.GetTerminologiesAsync(null);
        }
        
        /// <remarks/>
        public void GetTerminologiesAsync(object userState) {
            if ((this.GetTerminologiesOperationCompleted == null)) {
                this.GetTerminologiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminologiesOperationCompleted);
            }
            this.InvokeAsync("GetTerminologies", new object[0], this.GetTerminologiesOperationCompleted, userState);
        }
        
        private void OnGetTerminologiesOperationCompleted(object arg) {
            if ((this.GetTerminologiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminologiesCompleted(this, new GetTerminologiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetDefaultTerminologyProviders", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TerminologyProviderDescription[] GetDefaultTerminologyProviders() {
            object[] results = this.Invoke("GetDefaultTerminologyProviders", new object[0]);
            return ((TerminologyProviderDescription[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultTerminologyProvidersAsync() {
            this.GetDefaultTerminologyProvidersAsync(null);
        }
        
        /// <remarks/>
        public void GetDefaultTerminologyProvidersAsync(object userState) {
            if ((this.GetDefaultTerminologyProvidersOperationCompleted == null)) {
                this.GetDefaultTerminologyProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultTerminologyProvidersOperationCompleted);
            }
            this.InvokeAsync("GetDefaultTerminologyProviders", new object[0], this.GetDefaultTerminologyProvidersOperationCompleted, userState);
        }
        
        private void OnGetDefaultTerminologyProvidersOperationCompleted(object arg) {
            if ((this.GetDefaultTerminologyProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultTerminologyProvidersCompleted(this, new GetDefaultTerminologyProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetAllTerminologyProviders", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TerminologyProviderDescription[] GetAllTerminologyProviders() {
            object[] results = this.Invoke("GetAllTerminologyProviders", new object[0]);
            return ((TerminologyProviderDescription[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTerminologyProvidersAsync() {
            this.GetAllTerminologyProvidersAsync(null);
        }
        
        /// <remarks/>
        public void GetAllTerminologyProvidersAsync(object userState) {
            if ((this.GetAllTerminologyProvidersOperationCompleted == null)) {
                this.GetAllTerminologyProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTerminologyProvidersOperationCompleted);
            }
            this.InvokeAsync("GetAllTerminologyProviders", new object[0], this.GetAllTerminologyProvidersOperationCompleted, userState);
        }
        
        private void OnGetAllTerminologyProvidersOperationCompleted(object arg) {
            if ((this.GetAllTerminologyProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTerminologyProvidersCompleted(this, new GetAllTerminologyProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetDefaultTerminologyProviderName", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDefaultTerminologyProviderName(string terminologyName) {
            object[] results = this.Invoke("GetDefaultTerminologyProviderName", new object[] {
                        terminologyName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultTerminologyProviderNameAsync(string terminologyName) {
            this.GetDefaultTerminologyProviderNameAsync(terminologyName, null);
        }
        
        /// <remarks/>
        public void GetDefaultTerminologyProviderNameAsync(string terminologyName, object userState) {
            if ((this.GetDefaultTerminologyProviderNameOperationCompleted == null)) {
                this.GetDefaultTerminologyProviderNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultTerminologyProviderNameOperationCompleted);
            }
            this.InvokeAsync("GetDefaultTerminologyProviderName", new object[] {
                        terminologyName}, this.GetDefaultTerminologyProviderNameOperationCompleted, userState);
        }
        
        private void OnGetDefaultTerminologyProviderNameOperationCompleted(object arg) {
            if ((this.GetDefaultTerminologyProviderNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultTerminologyProviderNameCompleted(this, new GetDefaultTerminologyProviderNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetRegisteredQueries", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public QueryRegistrationView[] GetRegisteredQueries() {
            object[] results = this.Invoke("GetRegisteredQueries", new object[0]);
            return ((QueryRegistrationView[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRegisteredQueriesAsync() {
            this.GetRegisteredQueriesAsync(null);
        }
        
        /// <remarks/>
        public void GetRegisteredQueriesAsync(object userState) {
            if ((this.GetRegisteredQueriesOperationCompleted == null)) {
                this.GetRegisteredQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegisteredQueriesOperationCompleted);
            }
            this.InvokeAsync("GetRegisteredQueries", new object[0], this.GetRegisteredQueriesOperationCompleted, userState);
        }
        
        private void OnGetRegisteredQueriesOperationCompleted(object arg) {
            if ((this.GetRegisteredQueriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegisteredQueriesCompleted(this, new GetRegisteredQueriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/CancelRegistration", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelRegistration(string terminologyName, string queryName, string language) {
            this.Invoke("CancelRegistration", new object[] {
                        terminologyName,
                        queryName,
                        language});
        }
        
        /// <remarks/>
        public void CancelRegistrationAsync(string terminologyName, string queryName, string language) {
            this.CancelRegistrationAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void CancelRegistrationAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.CancelRegistrationOperationCompleted == null)) {
                this.CancelRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRegistrationOperationCompleted);
            }
            this.InvokeAsync("CancelRegistration", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.CancelRegistrationOperationCompleted, userState);
        }
        
        private void OnCancelRegistrationOperationCompleted(object arg) {
            if ((this.CancelRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRegistrationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/CancelEvaluation", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelEvaluation(string evaluationId) {
            this.Invoke("CancelEvaluation", new object[] {
                        evaluationId});
        }
        
        /// <remarks/>
        public void CancelEvaluationAsync(string evaluationId) {
            this.CancelEvaluationAsync(evaluationId, null);
        }
        
        /// <remarks/>
        public void CancelEvaluationAsync(string evaluationId, object userState) {
            if ((this.CancelEvaluationOperationCompleted == null)) {
                this.CancelEvaluationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelEvaluationOperationCompleted);
            }
            this.InvokeAsync("CancelEvaluation", new object[] {
                        evaluationId}, this.CancelEvaluationOperationCompleted, userState);
        }
        
        private void OnCancelEvaluationOperationCompleted(object arg) {
            if ((this.CancelEvaluationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelEvaluationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/UnRegisterAllQueries", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnRegisterAllQueries() {
            this.Invoke("UnRegisterAllQueries", new object[0]);
        }
        
        /// <remarks/>
        public void UnRegisterAllQueriesAsync() {
            this.UnRegisterAllQueriesAsync(null);
        }
        
        /// <remarks/>
        public void UnRegisterAllQueriesAsync(object userState) {
            if ((this.UnRegisterAllQueriesOperationCompleted == null)) {
                this.UnRegisterAllQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnRegisterAllQueriesOperationCompleted);
            }
            this.InvokeAsync("UnRegisterAllQueries", new object[0], this.UnRegisterAllQueriesOperationCompleted, userState);
        }
        
        private void OnUnRegisterAllQueriesOperationCompleted(object arg) {
            if ((this.UnRegisterAllQueriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnRegisterAllQueriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryRegister", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryRegister(string terminologyName, System.Xml.XmlNode queryXmlDocument) {
            this.Invoke("QueryRegister", new object[] {
                        terminologyName,
                        queryXmlDocument});
        }
        
        /// <remarks/>
        public void QueryRegisterAsync(string terminologyName, System.Xml.XmlNode queryXmlDocument) {
            this.QueryRegisterAsync(terminologyName, queryXmlDocument, null);
        }
        
        /// <remarks/>
        public void QueryRegisterAsync(string terminologyName, System.Xml.XmlNode queryXmlDocument, object userState) {
            if ((this.QueryRegisterOperationCompleted == null)) {
                this.QueryRegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryRegisterOperationCompleted);
            }
            this.InvokeAsync("QueryRegister", new object[] {
                        terminologyName,
                        queryXmlDocument}, this.QueryRegisterOperationCompleted, userState);
        }
        
        private void OnQueryRegisterOperationCompleted(object arg) {
            if ((this.QueryRegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryRegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryRegisterSource", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryRegisterSource(string terminologyName, string querySource) {
            this.Invoke("QueryRegisterSource", new object[] {
                        terminologyName,
                        querySource});
        }
        
        /// <remarks/>
        public void QueryRegisterSourceAsync(string terminologyName, string querySource) {
            this.QueryRegisterSourceAsync(terminologyName, querySource, null);
        }
        
        /// <remarks/>
        public void QueryRegisterSourceAsync(string terminologyName, string querySource, object userState) {
            if ((this.QueryRegisterSourceOperationCompleted == null)) {
                this.QueryRegisterSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryRegisterSourceOperationCompleted);
            }
            this.InvokeAsync("QueryRegisterSource", new object[] {
                        terminologyName,
                        querySource}, this.QueryRegisterSourceOperationCompleted, userState);
        }
        
        private void OnQueryRegisterSourceOperationCompleted(object arg) {
            if ((this.QueryRegisterSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryRegisterSourceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryIsRegistered", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool QueryIsRegistered(string terminologyName, string queryName, string language) {
            object[] results = this.Invoke("QueryIsRegistered", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void QueryIsRegisteredAsync(string terminologyName, string queryName, string language) {
            this.QueryIsRegisteredAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void QueryIsRegisteredAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.QueryIsRegisteredOperationCompleted == null)) {
                this.QueryIsRegisteredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryIsRegisteredOperationCompleted);
            }
            this.InvokeAsync("QueryIsRegistered", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.QueryIsRegisteredOperationCompleted, userState);
        }
        
        private void OnQueryIsRegisteredOperationCompleted(object arg) {
            if ((this.QueryIsRegisteredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryIsRegisteredCompleted(this, new QueryIsRegisteredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryUnRegister", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryUnRegister(string terminologyName, string queryName, string language) {
            this.Invoke("QueryUnRegister", new object[] {
                        terminologyName,
                        queryName,
                        language});
        }
        
        /// <remarks/>
        public void QueryUnRegisterAsync(string terminologyName, string queryName, string language) {
            this.QueryUnRegisterAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void QueryUnRegisterAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.QueryUnRegisterOperationCompleted == null)) {
                this.QueryUnRegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryUnRegisterOperationCompleted);
            }
            this.InvokeAsync("QueryUnRegister", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.QueryUnRegisterOperationCompleted, userState);
        }
        
        private void OnQueryUnRegisterOperationCompleted(object arg) {
            if ((this.QueryUnRegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryUnRegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionRegister", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryVersionRegister(System.Xml.XmlNode queryXmlDocument, CacheMode cacheMode, SourceSetResultSubsetBinding[] resultSubsetBindingList, SourceSetTerminologyBinding[] terminologyBindingList, string evaluationId) {
            this.Invoke("QueryVersionRegister", new object[] {
                        queryXmlDocument,
                        cacheMode,
                        resultSubsetBindingList,
                        terminologyBindingList,
                        evaluationId});
        }
        
        /// <remarks/>
        public void QueryVersionRegisterAsync(System.Xml.XmlNode queryXmlDocument, CacheMode cacheMode, SourceSetResultSubsetBinding[] resultSubsetBindingList, SourceSetTerminologyBinding[] terminologyBindingList, string evaluationId) {
            this.QueryVersionRegisterAsync(queryXmlDocument, cacheMode, resultSubsetBindingList, terminologyBindingList, evaluationId, null);
        }
        
        /// <remarks/>
        public void QueryVersionRegisterAsync(System.Xml.XmlNode queryXmlDocument, CacheMode cacheMode, SourceSetResultSubsetBinding[] resultSubsetBindingList, SourceSetTerminologyBinding[] terminologyBindingList, string evaluationId, object userState) {
            if ((this.QueryVersionRegisterOperationCompleted == null)) {
                this.QueryVersionRegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionRegisterOperationCompleted);
            }
            this.InvokeAsync("QueryVersionRegister", new object[] {
                        queryXmlDocument,
                        cacheMode,
                        resultSubsetBindingList,
                        terminologyBindingList,
                        evaluationId}, this.QueryVersionRegisterOperationCompleted, userState);
        }
        
        private void OnQueryVersionRegisterOperationCompleted(object arg) {
            if ((this.QueryVersionRegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionRegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionSaveDefinition", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryVersionSaveDefinition(System.Xml.XmlNode queryXmlDocument) {
            this.Invoke("QueryVersionSaveDefinition", new object[] {
                        queryXmlDocument});
        }
        
        /// <remarks/>
        public void QueryVersionSaveDefinitionAsync(System.Xml.XmlNode queryXmlDocument) {
            this.QueryVersionSaveDefinitionAsync(queryXmlDocument, null);
        }
        
        /// <remarks/>
        public void QueryVersionSaveDefinitionAsync(System.Xml.XmlNode queryXmlDocument, object userState) {
            if ((this.QueryVersionSaveDefinitionOperationCompleted == null)) {
                this.QueryVersionSaveDefinitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionSaveDefinitionOperationCompleted);
            }
            this.InvokeAsync("QueryVersionSaveDefinition", new object[] {
                        queryXmlDocument}, this.QueryVersionSaveDefinitionOperationCompleted, userState);
        }
        
        private void OnQueryVersionSaveDefinitionOperationCompleted(object arg) {
            if ((this.QueryVersionSaveDefinitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionSaveDefinitionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionRegisterSource", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryVersionRegisterSource(string querySource, CacheMode cacheMode, SourceSetResultSubsetBinding[] resultSubsetBindingList, SourceSetTerminologyBinding[] terminologyBindingList, string evaluationId) {
            this.Invoke("QueryVersionRegisterSource", new object[] {
                        querySource,
                        cacheMode,
                        resultSubsetBindingList,
                        terminologyBindingList,
                        evaluationId});
        }
        
        /// <remarks/>
        public void QueryVersionRegisterSourceAsync(string querySource, CacheMode cacheMode, SourceSetResultSubsetBinding[] resultSubsetBindingList, SourceSetTerminologyBinding[] terminologyBindingList, string evaluationId) {
            this.QueryVersionRegisterSourceAsync(querySource, cacheMode, resultSubsetBindingList, terminologyBindingList, evaluationId, null);
        }
        
        /// <remarks/>
        public void QueryVersionRegisterSourceAsync(string querySource, CacheMode cacheMode, SourceSetResultSubsetBinding[] resultSubsetBindingList, SourceSetTerminologyBinding[] terminologyBindingList, string evaluationId, object userState) {
            if ((this.QueryVersionRegisterSourceOperationCompleted == null)) {
                this.QueryVersionRegisterSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionRegisterSourceOperationCompleted);
            }
            this.InvokeAsync("QueryVersionRegisterSource", new object[] {
                        querySource,
                        cacheMode,
                        resultSubsetBindingList,
                        terminologyBindingList,
                        evaluationId}, this.QueryVersionRegisterSourceOperationCompleted, userState);
        }
        
        private void OnQueryVersionRegisterSourceOperationCompleted(object arg) {
            if ((this.QueryVersionRegisterSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionRegisterSourceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionUnRegister", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryVersionUnRegister(System.Guid queryVersionId) {
            this.Invoke("QueryVersionUnRegister", new object[] {
                        queryVersionId});
        }
        
        /// <remarks/>
        public void QueryVersionUnRegisterAsync(System.Guid queryVersionId) {
            this.QueryVersionUnRegisterAsync(queryVersionId, null);
        }
        
        /// <remarks/>
        public void QueryVersionUnRegisterAsync(System.Guid queryVersionId, object userState) {
            if ((this.QueryVersionUnRegisterOperationCompleted == null)) {
                this.QueryVersionUnRegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionUnRegisterOperationCompleted);
            }
            this.InvokeAsync("QueryVersionUnRegister", new object[] {
                        queryVersionId}, this.QueryVersionUnRegisterOperationCompleted, userState);
        }
        
        private void OnQueryVersionUnRegisterOperationCompleted(object arg) {
            if ((this.QueryVersionUnRegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionUnRegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetUnRegister", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResultSubsetUnRegister(System.Guid resultSubsetId) {
            this.Invoke("ResultSubsetUnRegister", new object[] {
                        resultSubsetId});
        }
        
        /// <remarks/>
        public void ResultSubsetUnRegisterAsync(System.Guid resultSubsetId) {
            this.ResultSubsetUnRegisterAsync(resultSubsetId, null);
        }
        
        /// <remarks/>
        public void ResultSubsetUnRegisterAsync(System.Guid resultSubsetId, object userState) {
            if ((this.ResultSubsetUnRegisterOperationCompleted == null)) {
                this.ResultSubsetUnRegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetUnRegisterOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetUnRegister", new object[] {
                        resultSubsetId}, this.ResultSubsetUnRegisterOperationCompleted, userState);
        }
        
        private void OnResultSubsetUnRegisterOperationCompleted(object arg) {
            if ((this.ResultSubsetUnRegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetUnRegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryImportLatestResultSubset", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryImportLatestResultSubset(string terminologyName, string queryName, string language, string sourceOTS) {
            this.Invoke("QueryImportLatestResultSubset", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        sourceOTS});
        }
        
        /// <remarks/>
        public void QueryImportLatestResultSubsetAsync(string terminologyName, string queryName, string language, string sourceOTS) {
            this.QueryImportLatestResultSubsetAsync(terminologyName, queryName, language, sourceOTS, null);
        }
        
        /// <remarks/>
        public void QueryImportLatestResultSubsetAsync(string terminologyName, string queryName, string language, string sourceOTS, object userState) {
            if ((this.QueryImportLatestResultSubsetOperationCompleted == null)) {
                this.QueryImportLatestResultSubsetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryImportLatestResultSubsetOperationCompleted);
            }
            this.InvokeAsync("QueryImportLatestResultSubset", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        sourceOTS}, this.QueryImportLatestResultSubsetOperationCompleted, userState);
        }
        
        private void OnQueryImportLatestResultSubsetOperationCompleted(object arg) {
            if ((this.QueryImportLatestResultSubsetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryImportLatestResultSubsetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryExportLatestResultSubset", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("queryGroupDef")]
        public string QueryExportLatestResultSubset(string terminologyName, string queryName, string language, out string queryDef, out string resultSubsetDef) {
            object[] results = this.Invoke("QueryExportLatestResultSubset", new object[] {
                        terminologyName,
                        queryName,
                        language});
            queryDef = ((string)(results[1]));
            resultSubsetDef = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryExportLatestResultSubsetAsync(string terminologyName, string queryName, string language) {
            this.QueryExportLatestResultSubsetAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void QueryExportLatestResultSubsetAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.QueryExportLatestResultSubsetOperationCompleted == null)) {
                this.QueryExportLatestResultSubsetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryExportLatestResultSubsetOperationCompleted);
            }
            this.InvokeAsync("QueryExportLatestResultSubset", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.QueryExportLatestResultSubsetOperationCompleted, userState);
        }
        
        private void OnQueryExportLatestResultSubsetOperationCompleted(object arg) {
            if ((this.QueryExportLatestResultSubsetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryExportLatestResultSubsetCompleted(this, new QueryExportLatestResultSubsetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetExport", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("queryGroupDef")]
        public string ResultSubsetExport(System.Guid resultSubsetId, out string queryDef, out string resultSubsetDef) {
            object[] results = this.Invoke("ResultSubsetExport", new object[] {
                        resultSubsetId});
            queryDef = ((string)(results[1]));
            resultSubsetDef = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetExportAsync(System.Guid resultSubsetId) {
            this.ResultSubsetExportAsync(resultSubsetId, null);
        }
        
        /// <remarks/>
        public void ResultSubsetExportAsync(System.Guid resultSubsetId, object userState) {
            if ((this.ResultSubsetExportOperationCompleted == null)) {
                this.ResultSubsetExportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetExportOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetExport", new object[] {
                        resultSubsetId}, this.ResultSubsetExportOperationCompleted, userState);
        }
        
        private void OnResultSubsetExportOperationCompleted(object arg) {
            if ((this.ResultSubsetExportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetExportCompleted(this, new ResultSubsetExportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryOpen", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryOpen(string terminologyName, string queryName, string language) {
            object[] results = this.Invoke("QueryOpen", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryOpenAsync(string terminologyName, string queryName, string language) {
            this.QueryOpenAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void QueryOpenAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.QueryOpenOperationCompleted == null)) {
                this.QueryOpenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryOpenOperationCompleted);
            }
            this.InvokeAsync("QueryOpen", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.QueryOpenOperationCompleted, userState);
        }
        
        private void OnQueryOpenOperationCompleted(object arg) {
            if ((this.QueryOpenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryOpenCompleted(this, new QueryOpenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryOpenPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryOpenPaged(string terminologyName, string queryName, string language, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryOpenPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryOpenPagedAsync(string terminologyName, string queryName, string language, int firstRowNum, int numRows, byte termFilter) {
            this.QueryOpenPagedAsync(terminologyName, queryName, language, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryOpenPagedAsync(string terminologyName, string queryName, string language, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryOpenPagedOperationCompleted == null)) {
                this.QueryOpenPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryOpenPagedOperationCompleted);
            }
            this.InvokeAsync("QueryOpenPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryOpenPagedOperationCompleted, userState);
        }
        
        private void OnQueryOpenPagedOperationCompleted(object arg) {
            if ((this.QueryOpenPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryOpenPagedCompleted(this, new QueryOpenPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryTermSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryTermSearch(string terminologyName, string queryName, string language, string termId) {
            object[] results = this.Invoke("QueryTermSearch", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        termId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryTermSearchAsync(string terminologyName, string queryName, string language, string termId) {
            this.QueryTermSearchAsync(terminologyName, queryName, language, termId, null);
        }
        
        /// <remarks/>
        public void QueryTermSearchAsync(string terminologyName, string queryName, string language, string termId, object userState) {
            if ((this.QueryTermSearchOperationCompleted == null)) {
                this.QueryTermSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryTermSearchOperationCompleted);
            }
            this.InvokeAsync("QueryTermSearch", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        termId}, this.QueryTermSearchOperationCompleted, userState);
        }
        
        private void OnQueryTermSearchOperationCompleted(object arg) {
            if ((this.QueryTermSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryTermSearchCompleted(this, new QueryTermSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetFullTerm", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGetFullTerm(string terminologyProviderName, string language, string termId) {
            object[] results = this.Invoke("TerminologyProviderGetFullTerm", new object[] {
                        terminologyProviderName,
                        language,
                        termId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetFullTermAsync(string terminologyProviderName, string language, string termId) {
            this.TerminologyProviderGetFullTermAsync(terminologyProviderName, language, termId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetFullTermAsync(string terminologyProviderName, string language, string termId, object userState) {
            if ((this.TerminologyProviderGetFullTermOperationCompleted == null)) {
                this.TerminologyProviderGetFullTermOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetFullTermOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetFullTerm", new object[] {
                        terminologyProviderName,
                        language,
                        termId}, this.TerminologyProviderGetFullTermOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetFullTermOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetFullTermCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetFullTermCompleted(this, new TerminologyProviderGetFullTermCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryTextSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryTextSearch(string terminologyName, string queryName, string language, string searchString) {
            object[] results = this.Invoke("QueryTextSearch", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryTextSearchAsync(string terminologyName, string queryName, string language, string searchString) {
            this.QueryTextSearchAsync(terminologyName, queryName, language, searchString, null);
        }
        
        /// <remarks/>
        public void QueryTextSearchAsync(string terminologyName, string queryName, string language, string searchString, object userState) {
            if ((this.QueryTextSearchOperationCompleted == null)) {
                this.QueryTextSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryTextSearchOperationCompleted);
            }
            this.InvokeAsync("QueryTextSearch", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchString}, this.QueryTextSearchOperationCompleted, userState);
        }
        
        private void OnQueryTextSearchOperationCompleted(object arg) {
            if ((this.QueryTextSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryTextSearchCompleted(this, new QueryTextSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryTextSearchPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryTextSearchPaged(string terminologyName, string queryName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryTextSearchPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryTextSearchPagedAsync(string terminologyName, string queryName, string language, string searchString, int firstRowNum, int numRows, byte termFilter) {
            this.QueryTextSearchPagedAsync(terminologyName, queryName, language, searchString, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryTextSearchPagedAsync(string terminologyName, string queryName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryTextSearchPagedOperationCompleted == null)) {
                this.QueryTextSearchPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryTextSearchPagedOperationCompleted);
            }
            this.InvokeAsync("QueryTextSearchPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryTextSearchPagedOperationCompleted, userState);
        }
        
        private void OnQueryTextSearchPagedOperationCompleted(object arg) {
            if ((this.QueryTextSearchPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryTextSearchPagedCompleted(this, new QueryTextSearchPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryTextSearchAnyOrderPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryTextSearchAnyOrderPaged(string terminologyName, string queryName, string language, string[] searchStringArray, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryTextSearchAnyOrderPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchStringArray,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryTextSearchAnyOrderPagedAsync(string terminologyName, string queryName, string language, string[] searchStringArray, int firstRowNum, int numRows, byte termFilter) {
            this.QueryTextSearchAnyOrderPagedAsync(terminologyName, queryName, language, searchStringArray, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryTextSearchAnyOrderPagedAsync(string terminologyName, string queryName, string language, string[] searchStringArray, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryTextSearchAnyOrderPagedOperationCompleted == null)) {
                this.QueryTextSearchAnyOrderPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryTextSearchAnyOrderPagedOperationCompleted);
            }
            this.InvokeAsync("QueryTextSearchAnyOrderPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchStringArray,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryTextSearchAnyOrderPagedOperationCompleted, userState);
        }
        
        private void OnQueryTextSearchAnyOrderPagedOperationCompleted(object arg) {
            if ((this.QueryTextSearchAnyOrderPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryTextSearchAnyOrderPagedCompleted(this, new QueryTextSearchAnyOrderPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGoDown", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryGoDown(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("QueryGoDown", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryGoDownAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId) {
            this.QueryGoDownAsync(terminologyName, queryName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void QueryGoDownAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.QueryGoDownOperationCompleted == null)) {
                this.QueryGoDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGoDownOperationCompleted);
            }
            this.InvokeAsync("QueryGoDown", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId}, this.QueryGoDownOperationCompleted, userState);
        }
        
        private void OnQueryGoDownOperationCompleted(object arg) {
            if ((this.QueryGoDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGoDownCompleted(this, new QueryGoDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGoDownPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryGoDownPaged(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryGoDownPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryGoDownPagedAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.QueryGoDownPagedAsync(terminologyName, queryName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryGoDownPagedAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryGoDownPagedOperationCompleted == null)) {
                this.QueryGoDownPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGoDownPagedOperationCompleted);
            }
            this.InvokeAsync("QueryGoDownPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryGoDownPagedOperationCompleted, userState);
        }
        
        private void OnQueryGoDownPagedOperationCompleted(object arg) {
            if ((this.QueryGoDownPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGoDownPagedCompleted(this, new QueryGoDownPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGoUp", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryGoUp(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("QueryGoUp", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryGoUpAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId) {
            this.QueryGoUpAsync(terminologyName, queryName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void QueryGoUpAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.QueryGoUpOperationCompleted == null)) {
                this.QueryGoUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGoUpOperationCompleted);
            }
            this.InvokeAsync("QueryGoUp", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId}, this.QueryGoUpOperationCompleted, userState);
        }
        
        private void OnQueryGoUpOperationCompleted(object arg) {
            if ((this.QueryGoUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGoUpCompleted(this, new QueryGoUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGoUpPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryGoUpPaged(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryGoUpPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryGoUpPagedAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.QueryGoUpPagedAsync(terminologyName, queryName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryGoUpPagedAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryGoUpPagedOperationCompleted == null)) {
                this.QueryGoUpPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGoUpPagedOperationCompleted);
            }
            this.InvokeAsync("QueryGoUpPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryGoUpPagedOperationCompleted, userState);
        }
        
        private void OnQueryGoUpPagedOperationCompleted(object arg) {
            if ((this.QueryGoUpPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGoUpPagedCompleted(this, new QueryGoUpPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGetTermsForConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryGetTermsForConcept(string terminologyName, string queryName, string language, string conceptId) {
            object[] results = this.Invoke("QueryGetTermsForConcept", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryGetTermsForConceptAsync(string terminologyName, string queryName, string language, string conceptId) {
            this.QueryGetTermsForConceptAsync(terminologyName, queryName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void QueryGetTermsForConceptAsync(string terminologyName, string queryName, string language, string conceptId, object userState) {
            if ((this.QueryGetTermsForConceptOperationCompleted == null)) {
                this.QueryGetTermsForConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGetTermsForConceptOperationCompleted);
            }
            this.InvokeAsync("QueryGetTermsForConcept", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        conceptId}, this.QueryGetTermsForConceptOperationCompleted, userState);
        }
        
        private void OnQueryGetTermsForConceptOperationCompleted(object arg) {
            if ((this.QueryGetTermsForConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGetTermsForConceptCompleted(this, new QueryGetTermsForConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGetTree", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public QueryTreeNode[] QueryGetTree(string terminologyName, string queryName, string language) {
            object[] results = this.Invoke("QueryGetTree", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((QueryTreeNode[])(results[0]));
        }
        
        /// <remarks/>
        public void QueryGetTreeAsync(string terminologyName, string queryName, string language) {
            this.QueryGetTreeAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void QueryGetTreeAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.QueryGetTreeOperationCompleted == null)) {
                this.QueryGetTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGetTreeOperationCompleted);
            }
            this.InvokeAsync("QueryGetTree", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.QueryGetTreeOperationCompleted, userState);
        }
        
        private void OnQueryGetTreeOperationCompleted(object arg) {
            if ((this.QueryGetTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGetTreeCompleted(this, new QueryGetTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGetLatestResultSubsetId", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid QueryGetLatestResultSubsetId(string terminologyName, string queryName, string language) {
            object[] results = this.Invoke("QueryGetLatestResultSubsetId", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void QueryGetLatestResultSubsetIdAsync(string terminologyName, string queryName, string language) {
            this.QueryGetLatestResultSubsetIdAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void QueryGetLatestResultSubsetIdAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.QueryGetLatestResultSubsetIdOperationCompleted == null)) {
                this.QueryGetLatestResultSubsetIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGetLatestResultSubsetIdOperationCompleted);
            }
            this.InvokeAsync("QueryGetLatestResultSubsetId", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.QueryGetLatestResultSubsetIdOperationCompleted, userState);
        }
        
        private void OnQueryGetLatestResultSubsetIdOperationCompleted(object arg) {
            if ((this.QueryGetLatestResultSubsetIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGetLatestResultSubsetIdCompleted(this, new QueryGetLatestResultSubsetIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGetLatestVersionId", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid QueryGetLatestVersionId(string terminologyName, string queryName, string language) {
            object[] results = this.Invoke("QueryGetLatestVersionId", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void QueryGetLatestVersionIdAsync(string terminologyName, string queryName, string language) {
            this.QueryGetLatestVersionIdAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void QueryGetLatestVersionIdAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.QueryGetLatestVersionIdOperationCompleted == null)) {
                this.QueryGetLatestVersionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGetLatestVersionIdOperationCompleted);
            }
            this.InvokeAsync("QueryGetLatestVersionId", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.QueryGetLatestVersionIdOperationCompleted, userState);
        }
        
        private void OnQueryGetLatestVersionIdOperationCompleted(object arg) {
            if ((this.QueryGetLatestVersionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGetLatestVersionIdCompleted(this, new QueryGetLatestVersionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGetVersions", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryGetVersions(string terminologyName, string queryName, string language) {
            object[] results = this.Invoke("QueryGetVersions", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryGetVersionsAsync(string terminologyName, string queryName, string language) {
            this.QueryGetVersionsAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void QueryGetVersionsAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.QueryGetVersionsOperationCompleted == null)) {
                this.QueryGetVersionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGetVersionsOperationCompleted);
            }
            this.InvokeAsync("QueryGetVersions", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.QueryGetVersionsOperationCompleted, userState);
        }
        
        private void OnQueryGetVersionsOperationCompleted(object arg) {
            if ((this.QueryGetVersionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGetVersionsCompleted(this, new QueryGetVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryGetSource", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryGetSource(string terminologyName, string queryName, string language) {
            object[] results = this.Invoke("QueryGetSource", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryGetSourceAsync(string terminologyName, string queryName, string language) {
            this.QueryGetSourceAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void QueryGetSourceAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.QueryGetSourceOperationCompleted == null)) {
                this.QueryGetSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryGetSourceOperationCompleted);
            }
            this.InvokeAsync("QueryGetSource", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.QueryGetSourceOperationCompleted, userState);
        }
        
        private void OnQueryGetSourceOperationCompleted(object arg) {
            if ((this.QueryGetSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryGetSourceCompleted(this, new QueryGetSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionSetLockedStatus", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryVersionSetLockedStatus(System.Guid queryVersionId, bool locked) {
            this.Invoke("QueryVersionSetLockedStatus", new object[] {
                        queryVersionId,
                        locked});
        }
        
        /// <remarks/>
        public void QueryVersionSetLockedStatusAsync(System.Guid queryVersionId, bool locked) {
            this.QueryVersionSetLockedStatusAsync(queryVersionId, locked, null);
        }
        
        /// <remarks/>
        public void QueryVersionSetLockedStatusAsync(System.Guid queryVersionId, bool locked, object userState) {
            if ((this.QueryVersionSetLockedStatusOperationCompleted == null)) {
                this.QueryVersionSetLockedStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionSetLockedStatusOperationCompleted);
            }
            this.InvokeAsync("QueryVersionSetLockedStatus", new object[] {
                        queryVersionId,
                        locked}, this.QueryVersionSetLockedStatusOperationCompleted, userState);
        }
        
        private void OnQueryVersionSetLockedStatusOperationCompleted(object arg) {
            if ((this.QueryVersionSetLockedStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionSetLockedStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionGetDefaultBindings", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultSubsetBindingArray")]
        public SourceSetResultSubsetBinding[] QueryVersionGetDefaultBindings(System.Guid queryVersionId, out SourceSetTerminologyBinding[] terminologyBindingArray) {
            object[] results = this.Invoke("QueryVersionGetDefaultBindings", new object[] {
                        queryVersionId});
            terminologyBindingArray = ((SourceSetTerminologyBinding[])(results[1]));
            return ((SourceSetResultSubsetBinding[])(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionGetDefaultBindingsAsync(System.Guid queryVersionId) {
            this.QueryVersionGetDefaultBindingsAsync(queryVersionId, null);
        }
        
        /// <remarks/>
        public void QueryVersionGetDefaultBindingsAsync(System.Guid queryVersionId, object userState) {
            if ((this.QueryVersionGetDefaultBindingsOperationCompleted == null)) {
                this.QueryVersionGetDefaultBindingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionGetDefaultBindingsOperationCompleted);
            }
            this.InvokeAsync("QueryVersionGetDefaultBindings", new object[] {
                        queryVersionId}, this.QueryVersionGetDefaultBindingsOperationCompleted, userState);
        }
        
        private void OnQueryVersionGetDefaultBindingsOperationCompleted(object arg) {
            if ((this.QueryVersionGetDefaultBindingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionGetDefaultBindingsCompleted(this, new QueryVersionGetDefaultBindingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionEvaluate", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryVersionEvaluate(System.Guid queryVersionId, CacheMode cacheMode, SourceSetResultSubsetBinding[] resultSubsetBindingList, SourceSetTerminologyBinding[] terminologyBindingList, string evaluationId) {
            this.Invoke("QueryVersionEvaluate", new object[] {
                        queryVersionId,
                        cacheMode,
                        resultSubsetBindingList,
                        terminologyBindingList,
                        evaluationId});
        }
        
        /// <remarks/>
        public void QueryVersionEvaluateAsync(System.Guid queryVersionId, CacheMode cacheMode, SourceSetResultSubsetBinding[] resultSubsetBindingList, SourceSetTerminologyBinding[] terminologyBindingList, string evaluationId) {
            this.QueryVersionEvaluateAsync(queryVersionId, cacheMode, resultSubsetBindingList, terminologyBindingList, evaluationId, null);
        }
        
        /// <remarks/>
        public void QueryVersionEvaluateAsync(System.Guid queryVersionId, CacheMode cacheMode, SourceSetResultSubsetBinding[] resultSubsetBindingList, SourceSetTerminologyBinding[] terminologyBindingList, string evaluationId, object userState) {
            if ((this.QueryVersionEvaluateOperationCompleted == null)) {
                this.QueryVersionEvaluateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionEvaluateOperationCompleted);
            }
            this.InvokeAsync("QueryVersionEvaluate", new object[] {
                        queryVersionId,
                        cacheMode,
                        resultSubsetBindingList,
                        terminologyBindingList,
                        evaluationId}, this.QueryVersionEvaluateOperationCompleted, userState);
        }
        
        private void OnQueryVersionEvaluateOperationCompleted(object arg) {
            if ((this.QueryVersionEvaluateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionEvaluateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionOpen", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionOpen(System.Guid queryVersionId) {
            object[] results = this.Invoke("QueryVersionOpen", new object[] {
                        queryVersionId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionOpenAsync(System.Guid queryVersionId) {
            this.QueryVersionOpenAsync(queryVersionId, null);
        }
        
        /// <remarks/>
        public void QueryVersionOpenAsync(System.Guid queryVersionId, object userState) {
            if ((this.QueryVersionOpenOperationCompleted == null)) {
                this.QueryVersionOpenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionOpenOperationCompleted);
            }
            this.InvokeAsync("QueryVersionOpen", new object[] {
                        queryVersionId}, this.QueryVersionOpenOperationCompleted, userState);
        }
        
        private void OnQueryVersionOpenOperationCompleted(object arg) {
            if ((this.QueryVersionOpenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionOpenCompleted(this, new QueryVersionOpenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionOpenPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionOpenPaged(System.Guid queryVersionId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryVersionOpenPaged", new object[] {
                        queryVersionId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionOpenPagedAsync(System.Guid queryVersionId, int firstRowNum, int numRows, byte termFilter) {
            this.QueryVersionOpenPagedAsync(queryVersionId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryVersionOpenPagedAsync(System.Guid queryVersionId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryVersionOpenPagedOperationCompleted == null)) {
                this.QueryVersionOpenPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionOpenPagedOperationCompleted);
            }
            this.InvokeAsync("QueryVersionOpenPaged", new object[] {
                        queryVersionId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryVersionOpenPagedOperationCompleted, userState);
        }
        
        private void OnQueryVersionOpenPagedOperationCompleted(object arg) {
            if ((this.QueryVersionOpenPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionOpenPagedCompleted(this, new QueryVersionOpenPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionGoDown", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionGoDown(System.Guid queryVersionId, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("QueryVersionGoDown", new object[] {
                        queryVersionId,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionGoDownAsync(System.Guid queryVersionId, OTSNodeRef queryNodeId) {
            this.QueryVersionGoDownAsync(queryVersionId, queryNodeId, null);
        }
        
        /// <remarks/>
        public void QueryVersionGoDownAsync(System.Guid queryVersionId, OTSNodeRef queryNodeId, object userState) {
            if ((this.QueryVersionGoDownOperationCompleted == null)) {
                this.QueryVersionGoDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionGoDownOperationCompleted);
            }
            this.InvokeAsync("QueryVersionGoDown", new object[] {
                        queryVersionId,
                        queryNodeId}, this.QueryVersionGoDownOperationCompleted, userState);
        }
        
        private void OnQueryVersionGoDownOperationCompleted(object arg) {
            if ((this.QueryVersionGoDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionGoDownCompleted(this, new QueryVersionGoDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionGoDownPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionGoDownPaged(System.Guid queryVersionId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryVersionGoDownPaged", new object[] {
                        queryVersionId,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionGoDownPagedAsync(System.Guid queryVersionId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.QueryVersionGoDownPagedAsync(queryVersionId, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryVersionGoDownPagedAsync(System.Guid queryVersionId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryVersionGoDownPagedOperationCompleted == null)) {
                this.QueryVersionGoDownPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionGoDownPagedOperationCompleted);
            }
            this.InvokeAsync("QueryVersionGoDownPaged", new object[] {
                        queryVersionId,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryVersionGoDownPagedOperationCompleted, userState);
        }
        
        private void OnQueryVersionGoDownPagedOperationCompleted(object arg) {
            if ((this.QueryVersionGoDownPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionGoDownPagedCompleted(this, new QueryVersionGoDownPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionGoUp", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionGoUp(System.Guid queryVersionId, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("QueryVersionGoUp", new object[] {
                        queryVersionId,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionGoUpAsync(System.Guid queryVersionId, OTSNodeRef queryNodeId) {
            this.QueryVersionGoUpAsync(queryVersionId, queryNodeId, null);
        }
        
        /// <remarks/>
        public void QueryVersionGoUpAsync(System.Guid queryVersionId, OTSNodeRef queryNodeId, object userState) {
            if ((this.QueryVersionGoUpOperationCompleted == null)) {
                this.QueryVersionGoUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionGoUpOperationCompleted);
            }
            this.InvokeAsync("QueryVersionGoUp", new object[] {
                        queryVersionId,
                        queryNodeId}, this.QueryVersionGoUpOperationCompleted, userState);
        }
        
        private void OnQueryVersionGoUpOperationCompleted(object arg) {
            if ((this.QueryVersionGoUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionGoUpCompleted(this, new QueryVersionGoUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionGoUpPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionGoUpPaged(System.Guid queryVersionId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryVersionGoUpPaged", new object[] {
                        queryVersionId,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionGoUpPagedAsync(System.Guid queryVersionId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.QueryVersionGoUpPagedAsync(queryVersionId, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryVersionGoUpPagedAsync(System.Guid queryVersionId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryVersionGoUpPagedOperationCompleted == null)) {
                this.QueryVersionGoUpPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionGoUpPagedOperationCompleted);
            }
            this.InvokeAsync("QueryVersionGoUpPaged", new object[] {
                        queryVersionId,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryVersionGoUpPagedOperationCompleted, userState);
        }
        
        private void OnQueryVersionGoUpPagedOperationCompleted(object arg) {
            if ((this.QueryVersionGoUpPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionGoUpPagedCompleted(this, new QueryVersionGoUpPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionTextSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionTextSearch(System.Guid queryVersionId, string searchString) {
            object[] results = this.Invoke("QueryVersionTextSearch", new object[] {
                        queryVersionId,
                        searchString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionTextSearchAsync(System.Guid queryVersionId, string searchString) {
            this.QueryVersionTextSearchAsync(queryVersionId, searchString, null);
        }
        
        /// <remarks/>
        public void QueryVersionTextSearchAsync(System.Guid queryVersionId, string searchString, object userState) {
            if ((this.QueryVersionTextSearchOperationCompleted == null)) {
                this.QueryVersionTextSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionTextSearchOperationCompleted);
            }
            this.InvokeAsync("QueryVersionTextSearch", new object[] {
                        queryVersionId,
                        searchString}, this.QueryVersionTextSearchOperationCompleted, userState);
        }
        
        private void OnQueryVersionTextSearchOperationCompleted(object arg) {
            if ((this.QueryVersionTextSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionTextSearchCompleted(this, new QueryVersionTextSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionTextSearchPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionTextSearchPaged(System.Guid queryVersionId, string searchString, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryVersionTextSearchPaged", new object[] {
                        queryVersionId,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionTextSearchPagedAsync(System.Guid queryVersionId, string searchString, int firstRowNum, int numRows, byte termFilter) {
            this.QueryVersionTextSearchPagedAsync(queryVersionId, searchString, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryVersionTextSearchPagedAsync(System.Guid queryVersionId, string searchString, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryVersionTextSearchPagedOperationCompleted == null)) {
                this.QueryVersionTextSearchPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionTextSearchPagedOperationCompleted);
            }
            this.InvokeAsync("QueryVersionTextSearchPaged", new object[] {
                        queryVersionId,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryVersionTextSearchPagedOperationCompleted, userState);
        }
        
        private void OnQueryVersionTextSearchPagedOperationCompleted(object arg) {
            if ((this.QueryVersionTextSearchPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionTextSearchPagedCompleted(this, new QueryVersionTextSearchPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionTextSearchAnyOrderPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionTextSearchAnyOrderPaged(System.Guid queryVersionId, string[] searchStringArray, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("QueryVersionTextSearchAnyOrderPaged", new object[] {
                        queryVersionId,
                        searchStringArray,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionTextSearchAnyOrderPagedAsync(System.Guid queryVersionId, string[] searchStringArray, int firstRowNum, int numRows, byte termFilter) {
            this.QueryVersionTextSearchAnyOrderPagedAsync(queryVersionId, searchStringArray, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void QueryVersionTextSearchAnyOrderPagedAsync(System.Guid queryVersionId, string[] searchStringArray, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.QueryVersionTextSearchAnyOrderPagedOperationCompleted == null)) {
                this.QueryVersionTextSearchAnyOrderPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionTextSearchAnyOrderPagedOperationCompleted);
            }
            this.InvokeAsync("QueryVersionTextSearchAnyOrderPaged", new object[] {
                        queryVersionId,
                        searchStringArray,
                        firstRowNum,
                        numRows,
                        termFilter}, this.QueryVersionTextSearchAnyOrderPagedOperationCompleted, userState);
        }
        
        private void OnQueryVersionTextSearchAnyOrderPagedOperationCompleted(object arg) {
            if ((this.QueryVersionTextSearchAnyOrderPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionTextSearchAnyOrderPagedCompleted(this, new QueryVersionTextSearchAnyOrderPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionTermSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionTermSearch(System.Guid queryVersionId, string termId) {
            object[] results = this.Invoke("QueryVersionTermSearch", new object[] {
                        queryVersionId,
                        termId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionTermSearchAsync(System.Guid queryVersionId, string termId) {
            this.QueryVersionTermSearchAsync(queryVersionId, termId, null);
        }
        
        /// <remarks/>
        public void QueryVersionTermSearchAsync(System.Guid queryVersionId, string termId, object userState) {
            if ((this.QueryVersionTermSearchOperationCompleted == null)) {
                this.QueryVersionTermSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionTermSearchOperationCompleted);
            }
            this.InvokeAsync("QueryVersionTermSearch", new object[] {
                        queryVersionId,
                        termId}, this.QueryVersionTermSearchOperationCompleted, userState);
        }
        
        private void OnQueryVersionTermSearchOperationCompleted(object arg) {
            if ((this.QueryVersionTermSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionTermSearchCompleted(this, new QueryVersionTermSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionGetSource", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryVersionGetSource(System.Guid QueryVersionId) {
            object[] results = this.Invoke("QueryVersionGetSource", new object[] {
                        QueryVersionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionGetSourceAsync(System.Guid QueryVersionId) {
            this.QueryVersionGetSourceAsync(QueryVersionId, null);
        }
        
        /// <remarks/>
        public void QueryVersionGetSourceAsync(System.Guid QueryVersionId, object userState) {
            if ((this.QueryVersionGetSourceOperationCompleted == null)) {
                this.QueryVersionGetSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionGetSourceOperationCompleted);
            }
            this.InvokeAsync("QueryVersionGetSource", new object[] {
                        QueryVersionId}, this.QueryVersionGetSourceOperationCompleted, userState);
        }
        
        private void OnQueryVersionGetSourceOperationCompleted(object arg) {
            if ((this.QueryVersionGetSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionGetSourceCompleted(this, new QueryVersionGetSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionGetLatestResultSubsetId", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid QueryVersionGetLatestResultSubsetId(System.Guid queryVersionId) {
            object[] results = this.Invoke("QueryVersionGetLatestResultSubsetId", new object[] {
                        queryVersionId});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionGetLatestResultSubsetIdAsync(System.Guid queryVersionId) {
            this.QueryVersionGetLatestResultSubsetIdAsync(queryVersionId, null);
        }
        
        /// <remarks/>
        public void QueryVersionGetLatestResultSubsetIdAsync(System.Guid queryVersionId, object userState) {
            if ((this.QueryVersionGetLatestResultSubsetIdOperationCompleted == null)) {
                this.QueryVersionGetLatestResultSubsetIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionGetLatestResultSubsetIdOperationCompleted);
            }
            this.InvokeAsync("QueryVersionGetLatestResultSubsetId", new object[] {
                        queryVersionId}, this.QueryVersionGetLatestResultSubsetIdOperationCompleted, userState);
        }
        
        private void OnQueryVersionGetLatestResultSubsetIdOperationCompleted(object arg) {
            if ((this.QueryVersionGetLatestResultSubsetIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionGetLatestResultSubsetIdCompleted(this, new QueryVersionGetLatestResultSubsetIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/QueryVersionGetTermsForConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryVersionGetTermsForConcept(System.Guid queryVersionId, string conceptId) {
            object[] results = this.Invoke("QueryVersionGetTermsForConcept", new object[] {
                        queryVersionId,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryVersionGetTermsForConceptAsync(System.Guid queryVersionId, string conceptId) {
            this.QueryVersionGetTermsForConceptAsync(queryVersionId, conceptId, null);
        }
        
        /// <remarks/>
        public void QueryVersionGetTermsForConceptAsync(System.Guid queryVersionId, string conceptId, object userState) {
            if ((this.QueryVersionGetTermsForConceptOperationCompleted == null)) {
                this.QueryVersionGetTermsForConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryVersionGetTermsForConceptOperationCompleted);
            }
            this.InvokeAsync("QueryVersionGetTermsForConcept", new object[] {
                        queryVersionId,
                        conceptId}, this.QueryVersionGetTermsForConceptOperationCompleted, userState);
        }
        
        private void OnQueryVersionGetTermsForConceptOperationCompleted(object arg) {
            if ((this.QueryVersionGetTermsForConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryVersionGetTermsForConceptCompleted(this, new QueryVersionGetTermsForConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetOpen", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetOpen(System.Guid resultSubsetId) {
            object[] results = this.Invoke("ResultSubsetOpen", new object[] {
                        resultSubsetId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetOpenAsync(System.Guid resultSubsetId) {
            this.ResultSubsetOpenAsync(resultSubsetId, null);
        }
        
        /// <remarks/>
        public void ResultSubsetOpenAsync(System.Guid resultSubsetId, object userState) {
            if ((this.ResultSubsetOpenOperationCompleted == null)) {
                this.ResultSubsetOpenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetOpenOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetOpen", new object[] {
                        resultSubsetId}, this.ResultSubsetOpenOperationCompleted, userState);
        }
        
        private void OnResultSubsetOpenOperationCompleted(object arg) {
            if ((this.ResultSubsetOpenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetOpenCompleted(this, new ResultSubsetOpenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetGoDown", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetGoDown(System.Guid resultSubsetId, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("ResultSubsetGoDown", new object[] {
                        resultSubsetId,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetGoDownAsync(System.Guid resultSubsetId, OTSNodeRef queryNodeId) {
            this.ResultSubsetGoDownAsync(resultSubsetId, queryNodeId, null);
        }
        
        /// <remarks/>
        public void ResultSubsetGoDownAsync(System.Guid resultSubsetId, OTSNodeRef queryNodeId, object userState) {
            if ((this.ResultSubsetGoDownOperationCompleted == null)) {
                this.ResultSubsetGoDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetGoDownOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetGoDown", new object[] {
                        resultSubsetId,
                        queryNodeId}, this.ResultSubsetGoDownOperationCompleted, userState);
        }
        
        private void OnResultSubsetGoDownOperationCompleted(object arg) {
            if ((this.ResultSubsetGoDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetGoDownCompleted(this, new ResultSubsetGoDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetGoUp", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetGoUp(System.Guid resultSubsetId, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("ResultSubsetGoUp", new object[] {
                        resultSubsetId,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetGoUpAsync(System.Guid resultSubsetId, OTSNodeRef queryNodeId) {
            this.ResultSubsetGoUpAsync(resultSubsetId, queryNodeId, null);
        }
        
        /// <remarks/>
        public void ResultSubsetGoUpAsync(System.Guid resultSubsetId, OTSNodeRef queryNodeId, object userState) {
            if ((this.ResultSubsetGoUpOperationCompleted == null)) {
                this.ResultSubsetGoUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetGoUpOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetGoUp", new object[] {
                        resultSubsetId,
                        queryNodeId}, this.ResultSubsetGoUpOperationCompleted, userState);
        }
        
        private void OnResultSubsetGoUpOperationCompleted(object arg) {
            if ((this.ResultSubsetGoUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetGoUpCompleted(this, new ResultSubsetGoUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetTextSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetTextSearch(System.Guid resultSubsetId, string searchString) {
            object[] results = this.Invoke("ResultSubsetTextSearch", new object[] {
                        resultSubsetId,
                        searchString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetTextSearchAsync(System.Guid resultSubsetId, string searchString) {
            this.ResultSubsetTextSearchAsync(resultSubsetId, searchString, null);
        }
        
        /// <remarks/>
        public void ResultSubsetTextSearchAsync(System.Guid resultSubsetId, string searchString, object userState) {
            if ((this.ResultSubsetTextSearchOperationCompleted == null)) {
                this.ResultSubsetTextSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetTextSearchOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetTextSearch", new object[] {
                        resultSubsetId,
                        searchString}, this.ResultSubsetTextSearchOperationCompleted, userState);
        }
        
        private void OnResultSubsetTextSearchOperationCompleted(object arg) {
            if ((this.ResultSubsetTextSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetTextSearchCompleted(this, new ResultSubsetTextSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetGoDownPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetGoDownPaged(System.Guid resultSubsetId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("ResultSubsetGoDownPaged", new object[] {
                        resultSubsetId,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetGoDownPagedAsync(System.Guid resultSubsetId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.ResultSubsetGoDownPagedAsync(resultSubsetId, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void ResultSubsetGoDownPagedAsync(System.Guid resultSubsetId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.ResultSubsetGoDownPagedOperationCompleted == null)) {
                this.ResultSubsetGoDownPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetGoDownPagedOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetGoDownPaged", new object[] {
                        resultSubsetId,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.ResultSubsetGoDownPagedOperationCompleted, userState);
        }
        
        private void OnResultSubsetGoDownPagedOperationCompleted(object arg) {
            if ((this.ResultSubsetGoDownPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetGoDownPagedCompleted(this, new ResultSubsetGoDownPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetGoUpPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetGoUpPaged(System.Guid resultSubsetId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("ResultSubsetGoUpPaged", new object[] {
                        resultSubsetId,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetGoUpPagedAsync(System.Guid resultSubsetId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.ResultSubsetGoUpPagedAsync(resultSubsetId, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void ResultSubsetGoUpPagedAsync(System.Guid resultSubsetId, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.ResultSubsetGoUpPagedOperationCompleted == null)) {
                this.ResultSubsetGoUpPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetGoUpPagedOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetGoUpPaged", new object[] {
                        resultSubsetId,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.ResultSubsetGoUpPagedOperationCompleted, userState);
        }
        
        private void OnResultSubsetGoUpPagedOperationCompleted(object arg) {
            if ((this.ResultSubsetGoUpPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetGoUpPagedCompleted(this, new ResultSubsetGoUpPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetTextSearchPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetTextSearchPaged(System.Guid resultSubsetId, string searchString, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("ResultSubsetTextSearchPaged", new object[] {
                        resultSubsetId,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetTextSearchPagedAsync(System.Guid resultSubsetId, string searchString, int firstRowNum, int numRows, byte termFilter) {
            this.ResultSubsetTextSearchPagedAsync(resultSubsetId, searchString, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void ResultSubsetTextSearchPagedAsync(System.Guid resultSubsetId, string searchString, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.ResultSubsetTextSearchPagedOperationCompleted == null)) {
                this.ResultSubsetTextSearchPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetTextSearchPagedOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetTextSearchPaged", new object[] {
                        resultSubsetId,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter}, this.ResultSubsetTextSearchPagedOperationCompleted, userState);
        }
        
        private void OnResultSubsetTextSearchPagedOperationCompleted(object arg) {
            if ((this.ResultSubsetTextSearchPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetTextSearchPagedCompleted(this, new ResultSubsetTextSearchPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetTextSearchAnyOrderPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetTextSearchAnyOrderPaged(System.Guid resultSubsetId, string[] searchStringArray, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("ResultSubsetTextSearchAnyOrderPaged", new object[] {
                        resultSubsetId,
                        searchStringArray,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetTextSearchAnyOrderPagedAsync(System.Guid resultSubsetId, string[] searchStringArray, int firstRowNum, int numRows, byte termFilter) {
            this.ResultSubsetTextSearchAnyOrderPagedAsync(resultSubsetId, searchStringArray, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void ResultSubsetTextSearchAnyOrderPagedAsync(System.Guid resultSubsetId, string[] searchStringArray, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.ResultSubsetTextSearchAnyOrderPagedOperationCompleted == null)) {
                this.ResultSubsetTextSearchAnyOrderPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetTextSearchAnyOrderPagedOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetTextSearchAnyOrderPaged", new object[] {
                        resultSubsetId,
                        searchStringArray,
                        firstRowNum,
                        numRows,
                        termFilter}, this.ResultSubsetTextSearchAnyOrderPagedOperationCompleted, userState);
        }
        
        private void OnResultSubsetTextSearchAnyOrderPagedOperationCompleted(object arg) {
            if ((this.ResultSubsetTextSearchAnyOrderPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetTextSearchAnyOrderPagedCompleted(this, new ResultSubsetTextSearchAnyOrderPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetOpenPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetOpenPaged(System.Guid resultSubsetId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("ResultSubsetOpenPaged", new object[] {
                        resultSubsetId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetOpenPagedAsync(System.Guid resultSubsetId, int firstRowNum, int numRows, byte termFilter) {
            this.ResultSubsetOpenPagedAsync(resultSubsetId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void ResultSubsetOpenPagedAsync(System.Guid resultSubsetId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.ResultSubsetOpenPagedOperationCompleted == null)) {
                this.ResultSubsetOpenPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetOpenPagedOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetOpenPaged", new object[] {
                        resultSubsetId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.ResultSubsetOpenPagedOperationCompleted, userState);
        }
        
        private void OnResultSubsetOpenPagedOperationCompleted(object arg) {
            if ((this.ResultSubsetOpenPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetOpenPagedCompleted(this, new ResultSubsetOpenPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetTermSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetTermSearch(System.Guid resultSubsetId, string termId) {
            object[] results = this.Invoke("ResultSubsetTermSearch", new object[] {
                        resultSubsetId,
                        termId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetTermSearchAsync(System.Guid resultSubsetId, string termId) {
            this.ResultSubsetTermSearchAsync(resultSubsetId, termId, null);
        }
        
        /// <remarks/>
        public void ResultSubsetTermSearchAsync(System.Guid resultSubsetId, string termId, object userState) {
            if ((this.ResultSubsetTermSearchOperationCompleted == null)) {
                this.ResultSubsetTermSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetTermSearchOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetTermSearch", new object[] {
                        resultSubsetId,
                        termId}, this.ResultSubsetTermSearchOperationCompleted, userState);
        }
        
        private void OnResultSubsetTermSearchOperationCompleted(object arg) {
            if ((this.ResultSubsetTermSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetTermSearchCompleted(this, new ResultSubsetTermSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/ResultSubsetGetTermsForConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ResultSubsetGetTermsForConcept(System.Guid resultSubsetId, string conceptId) {
            object[] results = this.Invoke("ResultSubsetGetTermsForConcept", new object[] {
                        resultSubsetId,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ResultSubsetGetTermsForConceptAsync(System.Guid resultSubsetId, string conceptId) {
            this.ResultSubsetGetTermsForConceptAsync(resultSubsetId, conceptId, null);
        }
        
        /// <remarks/>
        public void ResultSubsetGetTermsForConceptAsync(System.Guid resultSubsetId, string conceptId, object userState) {
            if ((this.ResultSubsetGetTermsForConceptOperationCompleted == null)) {
                this.ResultSubsetGetTermsForConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultSubsetGetTermsForConceptOperationCompleted);
            }
            this.InvokeAsync("ResultSubsetGetTermsForConcept", new object[] {
                        resultSubsetId,
                        conceptId}, this.ResultSubsetGetTermsForConceptOperationCompleted, userState);
        }
        
        private void OnResultSubsetGetTermsForConceptOperationCompleted(object arg) {
            if ((this.ResultSubsetGetTermsForConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultSubsetGetTermsForConceptCompleted(this, new ResultSubsetGetTermsForConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyOpen", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyOpen(string terminologyName, string language) {
            object[] results = this.Invoke("TerminologyOpen", new object[] {
                        terminologyName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyOpenAsync(string terminologyName, string language) {
            this.TerminologyOpenAsync(terminologyName, language, null);
        }
        
        /// <remarks/>
        public void TerminologyOpenAsync(string terminologyName, string language, object userState) {
            if ((this.TerminologyOpenOperationCompleted == null)) {
                this.TerminologyOpenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyOpenOperationCompleted);
            }
            this.InvokeAsync("TerminologyOpen", new object[] {
                        terminologyName,
                        language}, this.TerminologyOpenOperationCompleted, userState);
        }
        
        private void OnTerminologyOpenOperationCompleted(object arg) {
            if ((this.TerminologyOpenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyOpenCompleted(this, new TerminologyOpenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyOpenPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyOpenPaged(string terminologyName, string language, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyOpenPaged", new object[] {
                        terminologyName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyOpenPagedAsync(string terminologyName, string language, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyOpenPagedAsync(terminologyName, language, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyOpenPagedAsync(string terminologyName, string language, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyOpenPagedOperationCompleted == null)) {
                this.TerminologyOpenPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyOpenPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyOpenPaged", new object[] {
                        terminologyName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyOpenPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyOpenPagedOperationCompleted(object arg) {
            if ((this.TerminologyOpenPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyOpenPagedCompleted(this, new TerminologyOpenPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGoDown", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGoDown(string terminologyName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("TerminologyGoDown", new object[] {
                        terminologyName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGoDownAsync(string terminologyName, string language, OTSNodeRef queryNodeId) {
            this.TerminologyGoDownAsync(terminologyName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void TerminologyGoDownAsync(string terminologyName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.TerminologyGoDownOperationCompleted == null)) {
                this.TerminologyGoDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGoDownOperationCompleted);
            }
            this.InvokeAsync("TerminologyGoDown", new object[] {
                        terminologyName,
                        language,
                        queryNodeId}, this.TerminologyGoDownOperationCompleted, userState);
        }
        
        private void OnTerminologyGoDownOperationCompleted(object arg) {
            if ((this.TerminologyGoDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGoDownCompleted(this, new TerminologyGoDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGoDownPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGoDownPaged(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyGoDownPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGoDownPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyGoDownPagedAsync(terminologyName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyGoDownPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyGoDownPagedOperationCompleted == null)) {
                this.TerminologyGoDownPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGoDownPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyGoDownPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyGoDownPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyGoDownPagedOperationCompleted(object arg) {
            if ((this.TerminologyGoDownPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGoDownPagedCompleted(this, new TerminologyGoDownPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGoUp", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGoUp(string terminologyName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("TerminologyGoUp", new object[] {
                        terminologyName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGoUpAsync(string terminologyName, string language, OTSNodeRef queryNodeId) {
            this.TerminologyGoUpAsync(terminologyName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void TerminologyGoUpAsync(string terminologyName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.TerminologyGoUpOperationCompleted == null)) {
                this.TerminologyGoUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGoUpOperationCompleted);
            }
            this.InvokeAsync("TerminologyGoUp", new object[] {
                        terminologyName,
                        language,
                        queryNodeId}, this.TerminologyGoUpOperationCompleted, userState);
        }
        
        private void OnTerminologyGoUpOperationCompleted(object arg) {
            if ((this.TerminologyGoUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGoUpCompleted(this, new TerminologyGoUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGoUpPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGoUpPaged(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyGoUpPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGoUpPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyGoUpPagedAsync(terminologyName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyGoUpPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyGoUpPagedOperationCompleted == null)) {
                this.TerminologyGoUpPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGoUpPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyGoUpPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyGoUpPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyGoUpPagedOperationCompleted(object arg) {
            if ((this.TerminologyGoUpPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGoUpPagedCompleted(this, new TerminologyGoUpPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyTextSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyTextSearch(string terminologyName, string language, string searchString) {
            object[] results = this.Invoke("TerminologyTextSearch", new object[] {
                        terminologyName,
                        language,
                        searchString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyTextSearchAsync(string terminologyName, string language, string searchString) {
            this.TerminologyTextSearchAsync(terminologyName, language, searchString, null);
        }
        
        /// <remarks/>
        public void TerminologyTextSearchAsync(string terminologyName, string language, string searchString, object userState) {
            if ((this.TerminologyTextSearchOperationCompleted == null)) {
                this.TerminologyTextSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyTextSearchOperationCompleted);
            }
            this.InvokeAsync("TerminologyTextSearch", new object[] {
                        terminologyName,
                        language,
                        searchString}, this.TerminologyTextSearchOperationCompleted, userState);
        }
        
        private void OnTerminologyTextSearchOperationCompleted(object arg) {
            if ((this.TerminologyTextSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyTextSearchCompleted(this, new TerminologyTextSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyTextSearchPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyTextSearchPaged(string terminologyName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyTextSearchPaged", new object[] {
                        terminologyName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyTextSearchPagedAsync(string terminologyName, string language, string searchString, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyTextSearchPagedAsync(terminologyName, language, searchString, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyTextSearchPagedAsync(string terminologyName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyTextSearchPagedOperationCompleted == null)) {
                this.TerminologyTextSearchPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyTextSearchPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyTextSearchPaged", new object[] {
                        terminologyName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyTextSearchPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyTextSearchPagedOperationCompleted(object arg) {
            if ((this.TerminologyTextSearchPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyTextSearchPagedCompleted(this, new TerminologyTextSearchPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetConceptDetails", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGetConceptDetails(string terminologyName, string language, string referenceId) {
            object[] results = this.Invoke("TerminologyGetConceptDetails", new object[] {
                        terminologyName,
                        language,
                        referenceId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetConceptDetailsAsync(string terminologyName, string language, string referenceId) {
            this.TerminologyGetConceptDetailsAsync(terminologyName, language, referenceId, null);
        }
        
        /// <remarks/>
        public void TerminologyGetConceptDetailsAsync(string terminologyName, string language, string referenceId, object userState) {
            if ((this.TerminologyGetConceptDetailsOperationCompleted == null)) {
                this.TerminologyGetConceptDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetConceptDetailsOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetConceptDetails", new object[] {
                        terminologyName,
                        language,
                        referenceId}, this.TerminologyGetConceptDetailsOperationCompleted, userState);
        }
        
        private void OnTerminologyGetConceptDetailsOperationCompleted(object arg) {
            if ((this.TerminologyGetConceptDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetConceptDetailsCompleted(this, new TerminologyGetConceptDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetConceptsAndProperties", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGetConceptsAndProperties(string terminologyName, string language) {
            object[] results = this.Invoke("TerminologyGetConceptsAndProperties", new object[] {
                        terminologyName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetConceptsAndPropertiesAsync(string terminologyName, string language) {
            this.TerminologyGetConceptsAndPropertiesAsync(terminologyName, language, null);
        }
        
        /// <remarks/>
        public void TerminologyGetConceptsAndPropertiesAsync(string terminologyName, string language, object userState) {
            if ((this.TerminologyGetConceptsAndPropertiesOperationCompleted == null)) {
                this.TerminologyGetConceptsAndPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetConceptsAndPropertiesOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetConceptsAndProperties", new object[] {
                        terminologyName,
                        language}, this.TerminologyGetConceptsAndPropertiesOperationCompleted, userState);
        }
        
        private void OnTerminologyGetConceptsAndPropertiesOperationCompleted(object arg) {
            if ((this.TerminologyGetConceptsAndPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetConceptsAndPropertiesCompleted(this, new TerminologyGetConceptsAndPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetConceptForTerm", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TerminologyGetConceptForTerm(string terminologyName, string termId) {
            object[] results = this.Invoke("TerminologyGetConceptForTerm", new object[] {
                        terminologyName,
                        termId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetConceptForTermAsync(string terminologyName, string termId) {
            this.TerminologyGetConceptForTermAsync(terminologyName, termId, null);
        }
        
        /// <remarks/>
        public void TerminologyGetConceptForTermAsync(string terminologyName, string termId, object userState) {
            if ((this.TerminologyGetConceptForTermOperationCompleted == null)) {
                this.TerminologyGetConceptForTermOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetConceptForTermOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetConceptForTerm", new object[] {
                        terminologyName,
                        termId}, this.TerminologyGetConceptForTermOperationCompleted, userState);
        }
        
        private void OnTerminologyGetConceptForTermOperationCompleted(object arg) {
            if ((this.TerminologyGetConceptForTermCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetConceptForTermCompleted(this, new TerminologyGetConceptForTermCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyRelationshipGoDown", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyRelationshipGoDown(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId) {
            object[] results = this.Invoke("TerminologyRelationshipGoDown", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        relationshipId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyRelationshipGoDownAsync(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId) {
            this.TerminologyRelationshipGoDownAsync(terminologyName, language, queryNodeId, relationshipId, null);
        }
        
        /// <remarks/>
        public void TerminologyRelationshipGoDownAsync(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId, object userState) {
            if ((this.TerminologyRelationshipGoDownOperationCompleted == null)) {
                this.TerminologyRelationshipGoDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyRelationshipGoDownOperationCompleted);
            }
            this.InvokeAsync("TerminologyRelationshipGoDown", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        relationshipId}, this.TerminologyRelationshipGoDownOperationCompleted, userState);
        }
        
        private void OnTerminologyRelationshipGoDownOperationCompleted(object arg) {
            if ((this.TerminologyRelationshipGoDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyRelationshipGoDownCompleted(this, new TerminologyRelationshipGoDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyRelationshipGoDownPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyRelationshipGoDownPaged(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyRelationshipGoDownPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        relationshipId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyRelationshipGoDownPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyRelationshipGoDownPagedAsync(terminologyName, language, queryNodeId, relationshipId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyRelationshipGoDownPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyRelationshipGoDownPagedOperationCompleted == null)) {
                this.TerminologyRelationshipGoDownPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyRelationshipGoDownPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyRelationshipGoDownPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        relationshipId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyRelationshipGoDownPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyRelationshipGoDownPagedOperationCompleted(object arg) {
            if ((this.TerminologyRelationshipGoDownPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyRelationshipGoDownPagedCompleted(this, new TerminologyRelationshipGoDownPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyRelationshipGoUp", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyRelationshipGoUp(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId) {
            object[] results = this.Invoke("TerminologyRelationshipGoUp", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        relationshipId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyRelationshipGoUpAsync(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId) {
            this.TerminologyRelationshipGoUpAsync(terminologyName, language, queryNodeId, relationshipId, null);
        }
        
        /// <remarks/>
        public void TerminologyRelationshipGoUpAsync(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId, object userState) {
            if ((this.TerminologyRelationshipGoUpOperationCompleted == null)) {
                this.TerminologyRelationshipGoUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyRelationshipGoUpOperationCompleted);
            }
            this.InvokeAsync("TerminologyRelationshipGoUp", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        relationshipId}, this.TerminologyRelationshipGoUpOperationCompleted, userState);
        }
        
        private void OnTerminologyRelationshipGoUpOperationCompleted(object arg) {
            if ((this.TerminologyRelationshipGoUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyRelationshipGoUpCompleted(this, new TerminologyRelationshipGoUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyRelationshipGoUpPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyRelationshipGoUpPaged(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyRelationshipGoUpPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        relationshipId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyRelationshipGoUpPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyRelationshipGoUpPagedAsync(terminologyName, language, queryNodeId, relationshipId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyRelationshipGoUpPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyRelationshipGoUpPagedOperationCompleted == null)) {
                this.TerminologyRelationshipGoUpPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyRelationshipGoUpPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyRelationshipGoUpPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        relationshipId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyRelationshipGoUpPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyRelationshipGoUpPagedOperationCompleted(object arg) {
            if ((this.TerminologyRelationshipGoUpPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyRelationshipGoUpPagedCompleted(this, new TerminologyRelationshipGoUpPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetTraversalDirection", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TraversalDirection TerminologyGetTraversalDirection(string terminologyName, string relationshipId) {
            object[] results = this.Invoke("TerminologyGetTraversalDirection", new object[] {
                        terminologyName,
                        relationshipId});
            return ((TraversalDirection)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetTraversalDirectionAsync(string terminologyName, string relationshipId) {
            this.TerminologyGetTraversalDirectionAsync(terminologyName, relationshipId, null);
        }
        
        /// <remarks/>
        public void TerminologyGetTraversalDirectionAsync(string terminologyName, string relationshipId, object userState) {
            if ((this.TerminologyGetTraversalDirectionOperationCompleted == null)) {
                this.TerminologyGetTraversalDirectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetTraversalDirectionOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetTraversalDirection", new object[] {
                        terminologyName,
                        relationshipId}, this.TerminologyGetTraversalDirectionOperationCompleted, userState);
        }
        
        private void OnTerminologyGetTraversalDirectionOperationCompleted(object arg) {
            if ((this.TerminologyGetTraversalDirectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetTraversalDirectionCompleted(this, new TerminologyGetTraversalDirectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetRelationships", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGetRelationships(string terminologyName, string language) {
            object[] results = this.Invoke("TerminologyGetRelationships", new object[] {
                        terminologyName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetRelationshipsAsync(string terminologyName, string language) {
            this.TerminologyGetRelationshipsAsync(terminologyName, language, null);
        }
        
        /// <remarks/>
        public void TerminologyGetRelationshipsAsync(string terminologyName, string language, object userState) {
            if ((this.TerminologyGetRelationshipsOperationCompleted == null)) {
                this.TerminologyGetRelationshipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetRelationshipsOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetRelationships", new object[] {
                        terminologyName,
                        language}, this.TerminologyGetRelationshipsOperationCompleted, userState);
        }
        
        private void OnTerminologyGetRelationshipsOperationCompleted(object arg) {
            if ((this.TerminologyGetRelationshipsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetRelationshipsCompleted(this, new TerminologyGetRelationshipsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetConceptRegExpMask", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TerminologyGetConceptRegExpMask(string terminologyName) {
            object[] results = this.Invoke("TerminologyGetConceptRegExpMask", new object[] {
                        terminologyName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetConceptRegExpMaskAsync(string terminologyName) {
            this.TerminologyGetConceptRegExpMaskAsync(terminologyName, null);
        }
        
        /// <remarks/>
        public void TerminologyGetConceptRegExpMaskAsync(string terminologyName, object userState) {
            if ((this.TerminologyGetConceptRegExpMaskOperationCompleted == null)) {
                this.TerminologyGetConceptRegExpMaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetConceptRegExpMaskOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetConceptRegExpMask", new object[] {
                        terminologyName}, this.TerminologyGetConceptRegExpMaskOperationCompleted, userState);
        }
        
        private void OnTerminologyGetConceptRegExpMaskOperationCompleted(object arg) {
            if ((this.TerminologyGetConceptRegExpMaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetConceptRegExpMaskCompleted(this, new TerminologyGetConceptRegExpMaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetProperties", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] TerminologyGetProperties(string terminologyName, string language) {
            object[] results = this.Invoke("TerminologyGetProperties", new object[] {
                        terminologyName,
                        language});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetPropertiesAsync(string terminologyName, string language) {
            this.TerminologyGetPropertiesAsync(terminologyName, language, null);
        }
        
        /// <remarks/>
        public void TerminologyGetPropertiesAsync(string terminologyName, string language, object userState) {
            if ((this.TerminologyGetPropertiesOperationCompleted == null)) {
                this.TerminologyGetPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetPropertiesOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetProperties", new object[] {
                        terminologyName,
                        language}, this.TerminologyGetPropertiesOperationCompleted, userState);
        }
        
        private void OnTerminologyGetPropertiesOperationCompleted(object arg) {
            if ((this.TerminologyGetPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetPropertiesCompleted(this, new TerminologyGetPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetLanguages", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] TerminologyGetLanguages(string terminologyName) {
            object[] results = this.Invoke("TerminologyGetLanguages", new object[] {
                        terminologyName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetLanguagesAsync(string terminologyName) {
            this.TerminologyGetLanguagesAsync(terminologyName, null);
        }
        
        /// <remarks/>
        public void TerminologyGetLanguagesAsync(string terminologyName, object userState) {
            if ((this.TerminologyGetLanguagesOperationCompleted == null)) {
                this.TerminologyGetLanguagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetLanguagesOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetLanguages", new object[] {
                        terminologyName}, this.TerminologyGetLanguagesOperationCompleted, userState);
        }
        
        private void OnTerminologyGetLanguagesOperationCompleted(object arg) {
            if ((this.TerminologyGetLanguagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetLanguagesCompleted(this, new TerminologyGetLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetTerminologyProviders", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] TerminologyGetTerminologyProviders(string terminologyName) {
            object[] results = this.Invoke("TerminologyGetTerminologyProviders", new object[] {
                        terminologyName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetTerminologyProvidersAsync(string terminologyName) {
            this.TerminologyGetTerminologyProvidersAsync(terminologyName, null);
        }
        
        /// <remarks/>
        public void TerminologyGetTerminologyProvidersAsync(string terminologyName, object userState) {
            if ((this.TerminologyGetTerminologyProvidersOperationCompleted == null)) {
                this.TerminologyGetTerminologyProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetTerminologyProvidersOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetTerminologyProviders", new object[] {
                        terminologyName}, this.TerminologyGetTerminologyProvidersOperationCompleted, userState);
        }
        
        private void OnTerminologyGetTerminologyProvidersOperationCompleted(object arg) {
            if ((this.TerminologyGetTerminologyProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetTerminologyProvidersCompleted(this, new TerminologyGetTerminologyProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetAllTerminologyMappings", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TerminologyMapping[] TerminologyGetAllTerminologyMappings(string sourceTerminologyName) {
            object[] results = this.Invoke("TerminologyGetAllTerminologyMappings", new object[] {
                        sourceTerminologyName});
            return ((TerminologyMapping[])(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetAllTerminologyMappingsAsync(string sourceTerminologyName) {
            this.TerminologyGetAllTerminologyMappingsAsync(sourceTerminologyName, null);
        }
        
        /// <remarks/>
        public void TerminologyGetAllTerminologyMappingsAsync(string sourceTerminologyName, object userState) {
            if ((this.TerminologyGetAllTerminologyMappingsOperationCompleted == null)) {
                this.TerminologyGetAllTerminologyMappingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetAllTerminologyMappingsOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetAllTerminologyMappings", new object[] {
                        sourceTerminologyName}, this.TerminologyGetAllTerminologyMappingsOperationCompleted, userState);
        }
        
        private void OnTerminologyGetAllTerminologyMappingsOperationCompleted(object arg) {
            if ((this.TerminologyGetAllTerminologyMappingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetAllTerminologyMappingsCompleted(this, new TerminologyGetAllTerminologyMappingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetConceptMappings", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGetConceptMappings(string sourceTerminologyName, string terminologyMappingId, string sourceConceptId) {
            object[] results = this.Invoke("TerminologyGetConceptMappings", new object[] {
                        sourceTerminologyName,
                        terminologyMappingId,
                        sourceConceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetConceptMappingsAsync(string sourceTerminologyName, string terminologyMappingId, string sourceConceptId) {
            this.TerminologyGetConceptMappingsAsync(sourceTerminologyName, terminologyMappingId, sourceConceptId, null);
        }
        
        /// <remarks/>
        public void TerminologyGetConceptMappingsAsync(string sourceTerminologyName, string terminologyMappingId, string sourceConceptId, object userState) {
            if ((this.TerminologyGetConceptMappingsOperationCompleted == null)) {
                this.TerminologyGetConceptMappingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetConceptMappingsOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetConceptMappings", new object[] {
                        sourceTerminologyName,
                        terminologyMappingId,
                        sourceConceptId}, this.TerminologyGetConceptMappingsOperationCompleted, userState);
        }
        
        private void OnTerminologyGetConceptMappingsOperationCompleted(object arg) {
            if ((this.TerminologyGetConceptMappingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetConceptMappingsCompleted(this, new TerminologyGetConceptMappingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetFullTermsForConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGetFullTermsForConcept(string terminologyName, string language, string conceptId) {
            object[] results = this.Invoke("TerminologyGetFullTermsForConcept", new object[] {
                        terminologyName,
                        language,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetFullTermsForConceptAsync(string terminologyName, string language, string conceptId) {
            this.TerminologyGetFullTermsForConceptAsync(terminologyName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void TerminologyGetFullTermsForConceptAsync(string terminologyName, string language, string conceptId, object userState) {
            if ((this.TerminologyGetFullTermsForConceptOperationCompleted == null)) {
                this.TerminologyGetFullTermsForConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetFullTermsForConceptOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetFullTermsForConcept", new object[] {
                        terminologyName,
                        language,
                        conceptId}, this.TerminologyGetFullTermsForConceptOperationCompleted, userState);
        }
        
        private void OnTerminologyGetFullTermsForConceptOperationCompleted(object arg) {
            if ((this.TerminologyGetFullTermsForConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetFullTermsForConceptCompleted(this, new TerminologyGetFullTermsForConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetFullTerm", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGetFullTerm(string terminologyName, string language, string termId) {
            object[] results = this.Invoke("TerminologyGetFullTerm", new object[] {
                        terminologyName,
                        language,
                        termId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetFullTermAsync(string terminologyName, string language, string termId) {
            this.TerminologyGetFullTermAsync(terminologyName, language, termId, null);
        }
        
        /// <remarks/>
        public void TerminologyGetFullTermAsync(string terminologyName, string language, string termId, object userState) {
            if ((this.TerminologyGetFullTermOperationCompleted == null)) {
                this.TerminologyGetFullTermOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetFullTermOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetFullTerm", new object[] {
                        terminologyName,
                        language,
                        termId}, this.TerminologyGetFullTermOperationCompleted, userState);
        }
        
        private void OnTerminologyGetFullTermOperationCompleted(object arg) {
            if ((this.TerminologyGetFullTermCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetFullTermCompleted(this, new TerminologyGetFullTermCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetTermsForConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGetTermsForConcept(string terminologyName, string language, string conceptId) {
            object[] results = this.Invoke("TerminologyGetTermsForConcept", new object[] {
                        terminologyName,
                        language,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetTermsForConceptAsync(string terminologyName, string language, string conceptId) {
            this.TerminologyGetTermsForConceptAsync(terminologyName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void TerminologyGetTermsForConceptAsync(string terminologyName, string language, string conceptId, object userState) {
            if ((this.TerminologyGetTermsForConceptOperationCompleted == null)) {
                this.TerminologyGetTermsForConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetTermsForConceptOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetTermsForConcept", new object[] {
                        terminologyName,
                        language,
                        conceptId}, this.TerminologyGetTermsForConceptOperationCompleted, userState);
        }
        
        private void OnTerminologyGetTermsForConceptOperationCompleted(object arg) {
            if ((this.TerminologyGetTermsForConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetTermsForConceptCompleted(this, new TerminologyGetTermsForConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetPreferredTerms", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyGetPreferredTerms(string terminologyName, string language, string[] conceptIds) {
            object[] results = this.Invoke("TerminologyGetPreferredTerms", new object[] {
                        terminologyName,
                        language,
                        conceptIds});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetPreferredTermsAsync(string terminologyName, string language, string[] conceptIds) {
            this.TerminologyGetPreferredTermsAsync(terminologyName, language, conceptIds, null);
        }
        
        /// <remarks/>
        public void TerminologyGetPreferredTermsAsync(string terminologyName, string language, string[] conceptIds, object userState) {
            if ((this.TerminologyGetPreferredTermsOperationCompleted == null)) {
                this.TerminologyGetPreferredTermsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetPreferredTermsOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetPreferredTerms", new object[] {
                        terminologyName,
                        language,
                        conceptIds}, this.TerminologyGetPreferredTermsOperationCompleted, userState);
        }
        
        private void OnTerminologyGetPreferredTermsOperationCompleted(object arg) {
            if ((this.TerminologyGetPreferredTermsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetPreferredTermsCompleted(this, new TerminologyGetPreferredTermsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyGetPreferredTermText", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TerminologyGetPreferredTermText(string terminologyName, string language, string conceptId) {
            object[] results = this.Invoke("TerminologyGetPreferredTermText", new object[] {
                        terminologyName,
                        language,
                        conceptId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyGetPreferredTermTextAsync(string terminologyName, string language, string conceptId) {
            this.TerminologyGetPreferredTermTextAsync(terminologyName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void TerminologyGetPreferredTermTextAsync(string terminologyName, string language, string conceptId, object userState) {
            if ((this.TerminologyGetPreferredTermTextOperationCompleted == null)) {
                this.TerminologyGetPreferredTermTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyGetPreferredTermTextOperationCompleted);
            }
            this.InvokeAsync("TerminologyGetPreferredTermText", new object[] {
                        terminologyName,
                        language,
                        conceptId}, this.TerminologyGetPreferredTermTextOperationCompleted, userState);
        }
        
        private void OnTerminologyGetPreferredTermTextOperationCompleted(object arg) {
            if ((this.TerminologyGetPreferredTermTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyGetPreferredTermTextCompleted(this, new TerminologyGetPreferredTermTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyIsTermInTermHierarchy", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TerminologyIsTermInTermHierarchy(string terminologyName, string testTermId, string rootTermId, bool includeRoot) {
            object[] results = this.Invoke("TerminologyIsTermInTermHierarchy", new object[] {
                        terminologyName,
                        testTermId,
                        rootTermId,
                        includeRoot});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyIsTermInTermHierarchyAsync(string terminologyName, string testTermId, string rootTermId, bool includeRoot) {
            this.TerminologyIsTermInTermHierarchyAsync(terminologyName, testTermId, rootTermId, includeRoot, null);
        }
        
        /// <remarks/>
        public void TerminologyIsTermInTermHierarchyAsync(string terminologyName, string testTermId, string rootTermId, bool includeRoot, object userState) {
            if ((this.TerminologyIsTermInTermHierarchyOperationCompleted == null)) {
                this.TerminologyIsTermInTermHierarchyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyIsTermInTermHierarchyOperationCompleted);
            }
            this.InvokeAsync("TerminologyIsTermInTermHierarchy", new object[] {
                        terminologyName,
                        testTermId,
                        rootTermId,
                        includeRoot}, this.TerminologyIsTermInTermHierarchyOperationCompleted, userState);
        }
        
        private void OnTerminologyIsTermInTermHierarchyOperationCompleted(object arg) {
            if ((this.TerminologyIsTermInTermHierarchyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyIsTermInTermHierarchyCompleted(this, new TerminologyIsTermInTermHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyIsTermInConceptHierarchy", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TerminologyIsTermInConceptHierarchy(string terminologyName, string testTermId, string rootConceptId, bool includeRoot) {
            object[] results = this.Invoke("TerminologyIsTermInConceptHierarchy", new object[] {
                        terminologyName,
                        testTermId,
                        rootConceptId,
                        includeRoot});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyIsTermInConceptHierarchyAsync(string terminologyName, string testTermId, string rootConceptId, bool includeRoot) {
            this.TerminologyIsTermInConceptHierarchyAsync(terminologyName, testTermId, rootConceptId, includeRoot, null);
        }
        
        /// <remarks/>
        public void TerminologyIsTermInConceptHierarchyAsync(string terminologyName, string testTermId, string rootConceptId, bool includeRoot, object userState) {
            if ((this.TerminologyIsTermInConceptHierarchyOperationCompleted == null)) {
                this.TerminologyIsTermInConceptHierarchyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyIsTermInConceptHierarchyOperationCompleted);
            }
            this.InvokeAsync("TerminologyIsTermInConceptHierarchy", new object[] {
                        terminologyName,
                        testTermId,
                        rootConceptId,
                        includeRoot}, this.TerminologyIsTermInConceptHierarchyOperationCompleted, userState);
        }
        
        private void OnTerminologyIsTermInConceptHierarchyOperationCompleted(object arg) {
            if ((this.TerminologyIsTermInConceptHierarchyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyIsTermInConceptHierarchyCompleted(this, new TerminologyIsTermInConceptHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyIsConceptInConceptHierarchy", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TerminologyIsConceptInConceptHierarchy(string terminologyName, string testConceptId, string rootConceptId, bool includeRoot) {
            object[] results = this.Invoke("TerminologyIsConceptInConceptHierarchy", new object[] {
                        terminologyName,
                        testConceptId,
                        rootConceptId,
                        includeRoot});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyIsConceptInConceptHierarchyAsync(string terminologyName, string testConceptId, string rootConceptId, bool includeRoot) {
            this.TerminologyIsConceptInConceptHierarchyAsync(terminologyName, testConceptId, rootConceptId, includeRoot, null);
        }
        
        /// <remarks/>
        public void TerminologyIsConceptInConceptHierarchyAsync(string terminologyName, string testConceptId, string rootConceptId, bool includeRoot, object userState) {
            if ((this.TerminologyIsConceptInConceptHierarchyOperationCompleted == null)) {
                this.TerminologyIsConceptInConceptHierarchyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyIsConceptInConceptHierarchyOperationCompleted);
            }
            this.InvokeAsync("TerminologyIsConceptInConceptHierarchy", new object[] {
                        terminologyName,
                        testConceptId,
                        rootConceptId,
                        includeRoot}, this.TerminologyIsConceptInConceptHierarchyOperationCompleted, userState);
        }
        
        private void OnTerminologyIsConceptInConceptHierarchyOperationCompleted(object arg) {
            if ((this.TerminologyIsConceptInConceptHierarchyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyIsConceptInConceptHierarchyCompleted(this, new TerminologyIsConceptInConceptHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGoDown", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGoDown(string terminologyProviderName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("TerminologyProviderGoDown", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGoDownAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId) {
            this.TerminologyProviderGoDownAsync(terminologyProviderName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGoDownAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.TerminologyProviderGoDownOperationCompleted == null)) {
                this.TerminologyProviderGoDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGoDownOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGoDown", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId}, this.TerminologyProviderGoDownOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGoDownOperationCompleted(object arg) {
            if ((this.TerminologyProviderGoDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGoDownCompleted(this, new TerminologyProviderGoDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGoDownPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGoDownPaged(string terminologyProviderName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyProviderGoDownPaged", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGoDownPagedAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyProviderGoDownPagedAsync(terminologyProviderName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGoDownPagedAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyProviderGoDownPagedOperationCompleted == null)) {
                this.TerminologyProviderGoDownPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGoDownPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGoDownPaged", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyProviderGoDownPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGoDownPagedOperationCompleted(object arg) {
            if ((this.TerminologyProviderGoDownPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGoDownPagedCompleted(this, new TerminologyProviderGoDownPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGoUp", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGoUp(string terminologyProviderName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("TerminologyProviderGoUp", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGoUpAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId) {
            this.TerminologyProviderGoUpAsync(terminologyProviderName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGoUpAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.TerminologyProviderGoUpOperationCompleted == null)) {
                this.TerminologyProviderGoUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGoUpOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGoUp", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId}, this.TerminologyProviderGoUpOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGoUpOperationCompleted(object arg) {
            if ((this.TerminologyProviderGoUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGoUpCompleted(this, new TerminologyProviderGoUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGoUpPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGoUpPaged(string terminologyProviderName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyProviderGoUpPaged", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGoUpPagedAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyProviderGoUpPagedAsync(terminologyProviderName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGoUpPagedAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyProviderGoUpPagedOperationCompleted == null)) {
                this.TerminologyProviderGoUpPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGoUpPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGoUpPaged", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyProviderGoUpPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGoUpPagedOperationCompleted(object arg) {
            if ((this.TerminologyProviderGoUpPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGoUpPagedCompleted(this, new TerminologyProviderGoUpPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderRelationshipGoDown", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderRelationshipGoDown(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId) {
            object[] results = this.Invoke("TerminologyProviderRelationshipGoDown", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        relationshipId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderRelationshipGoDownAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId) {
            this.TerminologyProviderRelationshipGoDownAsync(terminologyProviderName, language, queryNodeId, relationshipId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderRelationshipGoDownAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId, object userState) {
            if ((this.TerminologyProviderRelationshipGoDownOperationCompleted == null)) {
                this.TerminologyProviderRelationshipGoDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderRelationshipGoDownOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderRelationshipGoDown", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        relationshipId}, this.TerminologyProviderRelationshipGoDownOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderRelationshipGoDownOperationCompleted(object arg) {
            if ((this.TerminologyProviderRelationshipGoDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderRelationshipGoDownCompleted(this, new TerminologyProviderRelationshipGoDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderRelationshipGoDownPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderRelationshipGoDownPaged(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyProviderRelationshipGoDownPaged", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        relationshipId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderRelationshipGoDownPagedAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyProviderRelationshipGoDownPagedAsync(terminologyProviderName, language, queryNodeId, relationshipId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderRelationshipGoDownPagedAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyProviderRelationshipGoDownPagedOperationCompleted == null)) {
                this.TerminologyProviderRelationshipGoDownPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderRelationshipGoDownPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderRelationshipGoDownPaged", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        relationshipId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyProviderRelationshipGoDownPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderRelationshipGoDownPagedOperationCompleted(object arg) {
            if ((this.TerminologyProviderRelationshipGoDownPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderRelationshipGoDownPagedCompleted(this, new TerminologyProviderRelationshipGoDownPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderRelationshipGoUp", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderRelationshipGoUp(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId) {
            object[] results = this.Invoke("TerminologyProviderRelationshipGoUp", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        relationshipId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderRelationshipGoUpAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId) {
            this.TerminologyProviderRelationshipGoUpAsync(terminologyProviderName, language, queryNodeId, relationshipId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderRelationshipGoUpAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId, object userState) {
            if ((this.TerminologyProviderRelationshipGoUpOperationCompleted == null)) {
                this.TerminologyProviderRelationshipGoUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderRelationshipGoUpOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderRelationshipGoUp", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        relationshipId}, this.TerminologyProviderRelationshipGoUpOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderRelationshipGoUpOperationCompleted(object arg) {
            if ((this.TerminologyProviderRelationshipGoUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderRelationshipGoUpCompleted(this, new TerminologyProviderRelationshipGoUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderRelationshipGoUpPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderRelationshipGoUpPaged(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyProviderRelationshipGoUpPaged", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        relationshipId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderRelationshipGoUpPagedAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyProviderRelationshipGoUpPagedAsync(terminologyProviderName, language, queryNodeId, relationshipId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderRelationshipGoUpPagedAsync(string terminologyProviderName, string language, OTSNodeRef queryNodeId, string relationshipId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyProviderRelationshipGoUpPagedOperationCompleted == null)) {
                this.TerminologyProviderRelationshipGoUpPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderRelationshipGoUpPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderRelationshipGoUpPaged", new object[] {
                        terminologyProviderName,
                        language,
                        queryNodeId,
                        relationshipId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyProviderRelationshipGoUpPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderRelationshipGoUpPagedOperationCompleted(object arg) {
            if ((this.TerminologyProviderRelationshipGoUpPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderRelationshipGoUpPagedCompleted(this, new TerminologyProviderRelationshipGoUpPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderOpen", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderOpen(string terminologyProviderName, string language) {
            object[] results = this.Invoke("TerminologyProviderOpen", new object[] {
                        terminologyProviderName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderOpenAsync(string terminologyProviderName, string language) {
            this.TerminologyProviderOpenAsync(terminologyProviderName, language, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderOpenAsync(string terminologyProviderName, string language, object userState) {
            if ((this.TerminologyProviderOpenOperationCompleted == null)) {
                this.TerminologyProviderOpenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderOpenOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderOpen", new object[] {
                        terminologyProviderName,
                        language}, this.TerminologyProviderOpenOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderOpenOperationCompleted(object arg) {
            if ((this.TerminologyProviderOpenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderOpenCompleted(this, new TerminologyProviderOpenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderOpenPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderOpenPaged(string terminologyProviderName, string language, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyProviderOpenPaged", new object[] {
                        terminologyProviderName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderOpenPagedAsync(string terminologyProviderName, string language, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyProviderOpenPagedAsync(terminologyProviderName, language, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderOpenPagedAsync(string terminologyProviderName, string language, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyProviderOpenPagedOperationCompleted == null)) {
                this.TerminologyProviderOpenPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderOpenPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderOpenPaged", new object[] {
                        terminologyProviderName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyProviderOpenPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderOpenPagedOperationCompleted(object arg) {
            if ((this.TerminologyProviderOpenPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderOpenPagedCompleted(this, new TerminologyProviderOpenPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetConceptDetails", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGetConceptDetails(string terminologyProviderName, string language, string referenceId) {
            object[] results = this.Invoke("TerminologyProviderGetConceptDetails", new object[] {
                        terminologyProviderName,
                        language,
                        referenceId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetConceptDetailsAsync(string terminologyProviderName, string language, string referenceId) {
            this.TerminologyProviderGetConceptDetailsAsync(terminologyProviderName, language, referenceId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetConceptDetailsAsync(string terminologyProviderName, string language, string referenceId, object userState) {
            if ((this.TerminologyProviderGetConceptDetailsOperationCompleted == null)) {
                this.TerminologyProviderGetConceptDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetConceptDetailsOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetConceptDetails", new object[] {
                        terminologyProviderName,
                        language,
                        referenceId}, this.TerminologyProviderGetConceptDetailsOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetConceptDetailsOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetConceptDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetConceptDetailsCompleted(this, new TerminologyProviderGetConceptDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetConceptsAndProperties", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGetConceptsAndProperties(string terminologyProviderName, string language) {
            object[] results = this.Invoke("TerminologyProviderGetConceptsAndProperties", new object[] {
                        terminologyProviderName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetConceptsAndPropertiesAsync(string terminologyProviderName, string language) {
            this.TerminologyProviderGetConceptsAndPropertiesAsync(terminologyProviderName, language, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetConceptsAndPropertiesAsync(string terminologyProviderName, string language, object userState) {
            if ((this.TerminologyProviderGetConceptsAndPropertiesOperationCompleted == null)) {
                this.TerminologyProviderGetConceptsAndPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetConceptsAndPropertiesOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetConceptsAndProperties", new object[] {
                        terminologyProviderName,
                        language}, this.TerminologyProviderGetConceptsAndPropertiesOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetConceptsAndPropertiesOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetConceptsAndPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetConceptsAndPropertiesCompleted(this, new TerminologyProviderGetConceptsAndPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetConceptForTerm", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TerminologyProviderGetConceptForTerm(string terminologyProviderName, string termId) {
            object[] results = this.Invoke("TerminologyProviderGetConceptForTerm", new object[] {
                        terminologyProviderName,
                        termId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetConceptForTermAsync(string terminologyProviderName, string termId) {
            this.TerminologyProviderGetConceptForTermAsync(terminologyProviderName, termId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetConceptForTermAsync(string terminologyProviderName, string termId, object userState) {
            if ((this.TerminologyProviderGetConceptForTermOperationCompleted == null)) {
                this.TerminologyProviderGetConceptForTermOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetConceptForTermOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetConceptForTerm", new object[] {
                        terminologyProviderName,
                        termId}, this.TerminologyProviderGetConceptForTermOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetConceptForTermOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetConceptForTermCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetConceptForTermCompleted(this, new TerminologyProviderGetConceptForTermCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetLanguages", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] TerminologyProviderGetLanguages(string terminologyProviderName) {
            object[] results = this.Invoke("TerminologyProviderGetLanguages", new object[] {
                        terminologyProviderName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetLanguagesAsync(string terminologyProviderName) {
            this.TerminologyProviderGetLanguagesAsync(terminologyProviderName, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetLanguagesAsync(string terminologyProviderName, object userState) {
            if ((this.TerminologyProviderGetLanguagesOperationCompleted == null)) {
                this.TerminologyProviderGetLanguagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetLanguagesOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetLanguages", new object[] {
                        terminologyProviderName}, this.TerminologyProviderGetLanguagesOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetLanguagesOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetLanguagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetLanguagesCompleted(this, new TerminologyProviderGetLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderTextSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderTextSearch(string terminologyProviderName, string language, string searchString) {
            object[] results = this.Invoke("TerminologyProviderTextSearch", new object[] {
                        terminologyProviderName,
                        language,
                        searchString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderTextSearchAsync(string terminologyProviderName, string language, string searchString) {
            this.TerminologyProviderTextSearchAsync(terminologyProviderName, language, searchString, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderTextSearchAsync(string terminologyProviderName, string language, string searchString, object userState) {
            if ((this.TerminologyProviderTextSearchOperationCompleted == null)) {
                this.TerminologyProviderTextSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderTextSearchOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderTextSearch", new object[] {
                        terminologyProviderName,
                        language,
                        searchString}, this.TerminologyProviderTextSearchOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderTextSearchOperationCompleted(object arg) {
            if ((this.TerminologyProviderTextSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderTextSearchCompleted(this, new TerminologyProviderTextSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderTextSearchPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderTextSearchPaged(string terminologyProviderName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyProviderTextSearchPaged", new object[] {
                        terminologyProviderName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderTextSearchPagedAsync(string terminologyProviderName, string language, string searchString, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyProviderTextSearchPagedAsync(terminologyProviderName, language, searchString, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderTextSearchPagedAsync(string terminologyProviderName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyProviderTextSearchPagedOperationCompleted == null)) {
                this.TerminologyProviderTextSearchPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderTextSearchPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderTextSearchPaged", new object[] {
                        terminologyProviderName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyProviderTextSearchPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderTextSearchPagedOperationCompleted(object arg) {
            if ((this.TerminologyProviderTextSearchPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderTextSearchPagedCompleted(this, new TerminologyProviderTextSearchPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetTermsForConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGetTermsForConcept(string terminologyProviderName, string language, string conceptId) {
            object[] results = this.Invoke("TerminologyProviderGetTermsForConcept", new object[] {
                        terminologyProviderName,
                        language,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetTermsForConceptAsync(string terminologyProviderName, string language, string conceptId) {
            this.TerminologyProviderGetTermsForConceptAsync(terminologyProviderName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetTermsForConceptAsync(string terminologyProviderName, string language, string conceptId, object userState) {
            if ((this.TerminologyProviderGetTermsForConceptOperationCompleted == null)) {
                this.TerminologyProviderGetTermsForConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetTermsForConceptOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetTermsForConcept", new object[] {
                        terminologyProviderName,
                        language,
                        conceptId}, this.TerminologyProviderGetTermsForConceptOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetTermsForConceptOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetTermsForConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetTermsForConceptCompleted(this, new TerminologyProviderGetTermsForConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetConceptMappings", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGetConceptMappings(string sourceTerminologyProviderName, string terminologyMappingId, string sourceConceptId) {
            object[] results = this.Invoke("TerminologyProviderGetConceptMappings", new object[] {
                        sourceTerminologyProviderName,
                        terminologyMappingId,
                        sourceConceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetConceptMappingsAsync(string sourceTerminologyProviderName, string terminologyMappingId, string sourceConceptId) {
            this.TerminologyProviderGetConceptMappingsAsync(sourceTerminologyProviderName, terminologyMappingId, sourceConceptId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetConceptMappingsAsync(string sourceTerminologyProviderName, string terminologyMappingId, string sourceConceptId, object userState) {
            if ((this.TerminologyProviderGetConceptMappingsOperationCompleted == null)) {
                this.TerminologyProviderGetConceptMappingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetConceptMappingsOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetConceptMappings", new object[] {
                        sourceTerminologyProviderName,
                        terminologyMappingId,
                        sourceConceptId}, this.TerminologyProviderGetConceptMappingsOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetConceptMappingsOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetConceptMappingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetConceptMappingsCompleted(this, new TerminologyProviderGetConceptMappingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetFullTermsForConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGetFullTermsForConcept(string terminologyProviderName, string language, string conceptId) {
            object[] results = this.Invoke("TerminologyProviderGetFullTermsForConcept", new object[] {
                        terminologyProviderName,
                        language,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetFullTermsForConceptAsync(string terminologyProviderName, string language, string conceptId) {
            this.TerminologyProviderGetFullTermsForConceptAsync(terminologyProviderName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetFullTermsForConceptAsync(string terminologyProviderName, string language, string conceptId, object userState) {
            if ((this.TerminologyProviderGetFullTermsForConceptOperationCompleted == null)) {
                this.TerminologyProviderGetFullTermsForConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetFullTermsForConceptOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetFullTermsForConcept", new object[] {
                        terminologyProviderName,
                        language,
                        conceptId}, this.TerminologyProviderGetFullTermsForConceptOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetFullTermsForConceptOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetFullTermsForConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetFullTermsForConceptCompleted(this, new TerminologyProviderGetFullTermsForConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetPreferredTermText", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TerminologyProviderGetPreferredTermText(string terminologyProviderName, string language, string conceptId) {
            object[] results = this.Invoke("TerminologyProviderGetPreferredTermText", new object[] {
                        terminologyProviderName,
                        language,
                        conceptId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetPreferredTermTextAsync(string terminologyProviderName, string language, string conceptId) {
            this.TerminologyProviderGetPreferredTermTextAsync(terminologyProviderName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetPreferredTermTextAsync(string terminologyProviderName, string language, string conceptId, object userState) {
            if ((this.TerminologyProviderGetPreferredTermTextOperationCompleted == null)) {
                this.TerminologyProviderGetPreferredTermTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetPreferredTermTextOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetPreferredTermText", new object[] {
                        terminologyProviderName,
                        language,
                        conceptId}, this.TerminologyProviderGetPreferredTermTextOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetPreferredTermTextOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetPreferredTermTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetPreferredTermTextCompleted(this, new TerminologyProviderGetPreferredTermTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetRelationships", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyProviderGetRelationships(string terminologyProviderName, string language) {
            object[] results = this.Invoke("TerminologyProviderGetRelationships", new object[] {
                        terminologyProviderName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetRelationshipsAsync(string terminologyProviderName, string language) {
            this.TerminologyProviderGetRelationshipsAsync(terminologyProviderName, language, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetRelationshipsAsync(string terminologyProviderName, string language, object userState) {
            if ((this.TerminologyProviderGetRelationshipsOperationCompleted == null)) {
                this.TerminologyProviderGetRelationshipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetRelationshipsOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetRelationships", new object[] {
                        terminologyProviderName,
                        language}, this.TerminologyProviderGetRelationshipsOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetRelationshipsOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetRelationshipsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetRelationshipsCompleted(this, new TerminologyProviderGetRelationshipsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderGetProperties", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] TerminologyProviderGetProperties(string terminologyProviderName, string language) {
            object[] results = this.Invoke("TerminologyProviderGetProperties", new object[] {
                        terminologyProviderName,
                        language});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderGetPropertiesAsync(string terminologyProviderName, string language) {
            this.TerminologyProviderGetPropertiesAsync(terminologyProviderName, language, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderGetPropertiesAsync(string terminologyProviderName, string language, object userState) {
            if ((this.TerminologyProviderGetPropertiesOperationCompleted == null)) {
                this.TerminologyProviderGetPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderGetPropertiesOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderGetProperties", new object[] {
                        terminologyProviderName,
                        language}, this.TerminologyProviderGetPropertiesOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderGetPropertiesOperationCompleted(object arg) {
            if ((this.TerminologyProviderGetPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderGetPropertiesCompleted(this, new TerminologyProviderGetPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderIsTermInTermHierarchy", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TerminologyProviderIsTermInTermHierarchy(string terminologyProviderName, string testTermId, string rootTermId, bool includeRoot) {
            object[] results = this.Invoke("TerminologyProviderIsTermInTermHierarchy", new object[] {
                        terminologyProviderName,
                        testTermId,
                        rootTermId,
                        includeRoot});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderIsTermInTermHierarchyAsync(string terminologyProviderName, string testTermId, string rootTermId, bool includeRoot) {
            this.TerminologyProviderIsTermInTermHierarchyAsync(terminologyProviderName, testTermId, rootTermId, includeRoot, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderIsTermInTermHierarchyAsync(string terminologyProviderName, string testTermId, string rootTermId, bool includeRoot, object userState) {
            if ((this.TerminologyProviderIsTermInTermHierarchyOperationCompleted == null)) {
                this.TerminologyProviderIsTermInTermHierarchyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderIsTermInTermHierarchyOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderIsTermInTermHierarchy", new object[] {
                        terminologyProviderName,
                        testTermId,
                        rootTermId,
                        includeRoot}, this.TerminologyProviderIsTermInTermHierarchyOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderIsTermInTermHierarchyOperationCompleted(object arg) {
            if ((this.TerminologyProviderIsTermInTermHierarchyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderIsTermInTermHierarchyCompleted(this, new TerminologyProviderIsTermInTermHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderIsTermInConceptHierarchy", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TerminologyProviderIsTermInConceptHierarchy(string terminologyProviderName, string testTermId, string rootConceptId, bool includeRoot) {
            object[] results = this.Invoke("TerminologyProviderIsTermInConceptHierarchy", new object[] {
                        terminologyProviderName,
                        testTermId,
                        rootConceptId,
                        includeRoot});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderIsTermInConceptHierarchyAsync(string terminologyProviderName, string testTermId, string rootConceptId, bool includeRoot) {
            this.TerminologyProviderIsTermInConceptHierarchyAsync(terminologyProviderName, testTermId, rootConceptId, includeRoot, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderIsTermInConceptHierarchyAsync(string terminologyProviderName, string testTermId, string rootConceptId, bool includeRoot, object userState) {
            if ((this.TerminologyProviderIsTermInConceptHierarchyOperationCompleted == null)) {
                this.TerminologyProviderIsTermInConceptHierarchyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderIsTermInConceptHierarchyOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderIsTermInConceptHierarchy", new object[] {
                        terminologyProviderName,
                        testTermId,
                        rootConceptId,
                        includeRoot}, this.TerminologyProviderIsTermInConceptHierarchyOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderIsTermInConceptHierarchyOperationCompleted(object arg) {
            if ((this.TerminologyProviderIsTermInConceptHierarchyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderIsTermInConceptHierarchyCompleted(this, new TerminologyProviderIsTermInConceptHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyProviderIsConceptInConceptHierarchy", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TerminologyProviderIsConceptInConceptHierarchy(string terminologyProviderName, string testConceptId, string rootConceptId, bool includeRoot) {
            object[] results = this.Invoke("TerminologyProviderIsConceptInConceptHierarchy", new object[] {
                        terminologyProviderName,
                        testConceptId,
                        rootConceptId,
                        includeRoot});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyProviderIsConceptInConceptHierarchyAsync(string terminologyProviderName, string testConceptId, string rootConceptId, bool includeRoot) {
            this.TerminologyProviderIsConceptInConceptHierarchyAsync(terminologyProviderName, testConceptId, rootConceptId, includeRoot, null);
        }
        
        /// <remarks/>
        public void TerminologyProviderIsConceptInConceptHierarchyAsync(string terminologyProviderName, string testConceptId, string rootConceptId, bool includeRoot, object userState) {
            if ((this.TerminologyProviderIsConceptInConceptHierarchyOperationCompleted == null)) {
                this.TerminologyProviderIsConceptInConceptHierarchyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyProviderIsConceptInConceptHierarchyOperationCompleted);
            }
            this.InvokeAsync("TerminologyProviderIsConceptInConceptHierarchy", new object[] {
                        terminologyProviderName,
                        testConceptId,
                        rootConceptId,
                        includeRoot}, this.TerminologyProviderIsConceptInConceptHierarchyOperationCompleted, userState);
        }
        
        private void OnTerminologyProviderIsConceptInConceptHierarchyOperationCompleted(object arg) {
            if ((this.TerminologyProviderIsConceptInConceptHierarchyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyProviderIsConceptInConceptHierarchyCompleted(this, new TerminologyProviderIsConceptInConceptHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/dummyQueryNavigationNode", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void dummyQueryNavigationNode(QueryNavigationNode p1, Term p2, CacheMode c) {
            this.Invoke("dummyQueryNavigationNode", new object[] {
                        p1,
                        p2,
                        c});
        }
        
        /// <remarks/>
        public void dummyQueryNavigationNodeAsync(QueryNavigationNode p1, Term p2, CacheMode c) {
            this.dummyQueryNavigationNodeAsync(p1, p2, c, null);
        }
        
        /// <remarks/>
        public void dummyQueryNavigationNodeAsync(QueryNavigationNode p1, Term p2, CacheMode c, object userState) {
            if ((this.dummyQueryNavigationNodeOperationCompleted == null)) {
                this.dummyQueryNavigationNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndummyQueryNavigationNodeOperationCompleted);
            }
            this.InvokeAsync("dummyQueryNavigationNode", new object[] {
                        p1,
                        p2,
                        c}, this.dummyQueryNavigationNodeOperationCompleted, userState);
        }
        
        private void OndummyQueryNavigationNodeOperationCompleted(object arg) {
            if ((this.dummyQueryNavigationNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.dummyQueryNavigationNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/IsAvailable", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IsAvailable() {
            this.Invoke("IsAvailable", new object[0]);
        }
        
        /// <remarks/>
        public void IsAvailableAsync() {
            this.IsAvailableAsync(null);
        }
        
        /// <remarks/>
        public void IsAvailableAsync(object userState) {
            if ((this.IsAvailableOperationCompleted == null)) {
                this.IsAvailableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAvailableOperationCompleted);
            }
            this.InvokeAsync("IsAvailable", new object[0], this.IsAvailableOperationCompleted, userState);
        }
        
        private void OnIsAvailableOperationCompleted(object arg) {
            if ((this.IsAvailableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAvailableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/UserName", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserName() {
            object[] results = this.Invoke("UserName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserNameAsync() {
            this.UserNameAsync(null);
        }
        
        /// <remarks/>
        public void UserNameAsync(object userState) {
            if ((this.UserNameOperationCompleted == null)) {
                this.UserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserNameOperationCompleted);
            }
            this.InvokeAsync("UserName", new object[0], this.UserNameOperationCompleted, userState);
        }
        
        private void OnUserNameOperationCompleted(object arg) {
            if ((this.UserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserNameCompleted(this, new UserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/UserDomainName", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserDomainName() {
            object[] results = this.Invoke("UserDomainName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserDomainNameAsync() {
            this.UserDomainNameAsync(null);
        }
        
        /// <remarks/>
        public void UserDomainNameAsync(object userState) {
            if ((this.UserDomainNameOperationCompleted == null)) {
                this.UserDomainNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserDomainNameOperationCompleted);
            }
            this.InvokeAsync("UserDomainName", new object[0], this.UserDomainNameOperationCompleted, userState);
        }
        
        private void OnUserDomainNameOperationCompleted(object arg) {
            if ((this.UserDomainNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserDomainNameCompleted(this, new UserDomainNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/OpenQuery", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet OpenQuery(string terminologyName, string queryName, string language) {
            object[] results = this.Invoke("OpenQuery", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void OpenQueryAsync(string terminologyName, string queryName, string language) {
            this.OpenQueryAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void OpenQueryAsync(string terminologyName, string queryName, string language, object userState) {
            if ((this.OpenQueryOperationCompleted == null)) {
                this.OpenQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenQueryOperationCompleted);
            }
            this.InvokeAsync("OpenQuery", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.OpenQueryOperationCompleted, userState);
        }
        
        private void OnOpenQueryOperationCompleted(object arg) {
            if ((this.OpenQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenQueryCompleted(this, new OpenQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/OpenQueryPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet OpenQueryPaged(string terminologyName, string queryName, string language, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("OpenQueryPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void OpenQueryPagedAsync(string terminologyName, string queryName, string language, int firstRowNum, int numRows, byte termFilter) {
            this.OpenQueryPagedAsync(terminologyName, queryName, language, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void OpenQueryPagedAsync(string terminologyName, string queryName, string language, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.OpenQueryPagedOperationCompleted == null)) {
                this.OpenQueryPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenQueryPagedOperationCompleted);
            }
            this.InvokeAsync("OpenQueryPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter}, this.OpenQueryPagedOperationCompleted, userState);
        }
        
        private void OnOpenQueryPagedOperationCompleted(object arg) {
            if ((this.OpenQueryPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenQueryPagedCompleted(this, new OpenQueryPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GoDown", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GoDown(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("GoDown", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GoDownAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId) {
            this.GoDownAsync(terminologyName, queryName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void GoDownAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.GoDownOperationCompleted == null)) {
                this.GoDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGoDownOperationCompleted);
            }
            this.InvokeAsync("GoDown", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId}, this.GoDownOperationCompleted, userState);
        }
        
        private void OnGoDownOperationCompleted(object arg) {
            if ((this.GoDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GoDownCompleted(this, new GoDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GoDownPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GoDownPaged(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("GoDownPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GoDownPagedAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.GoDownPagedAsync(terminologyName, queryName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void GoDownPagedAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.GoDownPagedOperationCompleted == null)) {
                this.GoDownPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGoDownPagedOperationCompleted);
            }
            this.InvokeAsync("GoDownPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.GoDownPagedOperationCompleted, userState);
        }
        
        private void OnGoDownPagedOperationCompleted(object arg) {
            if ((this.GoDownPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GoDownPagedCompleted(this, new GoDownPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GoUp", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GoUp(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("GoUp", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GoUpAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId) {
            this.GoUpAsync(terminologyName, queryName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void GoUpAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.GoUpOperationCompleted == null)) {
                this.GoUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGoUpOperationCompleted);
            }
            this.InvokeAsync("GoUp", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId}, this.GoUpOperationCompleted, userState);
        }
        
        private void OnGoUpOperationCompleted(object arg) {
            if ((this.GoUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GoUpCompleted(this, new GoUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GoUpPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GoUpPaged(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("GoUpPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GoUpPagedAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.GoUpPagedAsync(terminologyName, queryName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void GoUpPagedAsync(string terminologyName, string queryName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.GoUpPagedOperationCompleted == null)) {
                this.GoUpPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGoUpPagedOperationCompleted);
            }
            this.InvokeAsync("GoUpPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.GoUpPagedOperationCompleted, userState);
        }
        
        private void OnGoUpPagedOperationCompleted(object arg) {
            if ((this.GoUpPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GoUpPagedCompleted(this, new GoUpPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TextSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TextSearch(string terminologyName, string queryName, string language, string searchString) {
            object[] results = this.Invoke("TextSearch", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TextSearchAsync(string terminologyName, string queryName, string language, string searchString) {
            this.TextSearchAsync(terminologyName, queryName, language, searchString, null);
        }
        
        /// <remarks/>
        public void TextSearchAsync(string terminologyName, string queryName, string language, string searchString, object userState) {
            if ((this.TextSearchOperationCompleted == null)) {
                this.TextSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTextSearchOperationCompleted);
            }
            this.InvokeAsync("TextSearch", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchString}, this.TextSearchOperationCompleted, userState);
        }
        
        private void OnTextSearchOperationCompleted(object arg) {
            if ((this.TextSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TextSearchCompleted(this, new TextSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TextSearchPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TextSearchPaged(string terminologyName, string queryName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TextSearchPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TextSearchPagedAsync(string terminologyName, string queryName, string language, string searchString, int firstRowNum, int numRows, byte termFilter) {
            this.TextSearchPagedAsync(terminologyName, queryName, language, searchString, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TextSearchPagedAsync(string terminologyName, string queryName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TextSearchPagedOperationCompleted == null)) {
                this.TextSearchPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTextSearchPagedOperationCompleted);
            }
            this.InvokeAsync("TextSearchPaged", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TextSearchPagedOperationCompleted, userState);
        }
        
        private void OnTextSearchPagedOperationCompleted(object arg) {
            if ((this.TextSearchPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TextSearchPagedCompleted(this, new TextSearchPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyBrowserGetConceptDetails", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyBrowserGetConceptDetails(string terminologyName, string language, string referenceId) {
            object[] results = this.Invoke("TerminologyBrowserGetConceptDetails", new object[] {
                        terminologyName,
                        language,
                        referenceId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyBrowserGetConceptDetailsAsync(string terminologyName, string language, string referenceId) {
            this.TerminologyBrowserGetConceptDetailsAsync(terminologyName, language, referenceId, null);
        }
        
        /// <remarks/>
        public void TerminologyBrowserGetConceptDetailsAsync(string terminologyName, string language, string referenceId, object userState) {
            if ((this.TerminologyBrowserGetConceptDetailsOperationCompleted == null)) {
                this.TerminologyBrowserGetConceptDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyBrowserGetConceptDetailsOperationCompleted);
            }
            this.InvokeAsync("TerminologyBrowserGetConceptDetails", new object[] {
                        terminologyName,
                        language,
                        referenceId}, this.TerminologyBrowserGetConceptDetailsOperationCompleted, userState);
        }
        
        private void OnTerminologyBrowserGetConceptDetailsOperationCompleted(object arg) {
            if ((this.TerminologyBrowserGetConceptDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyBrowserGetConceptDetailsCompleted(this, new TerminologyBrowserGetConceptDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyBrowserOpen", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyBrowserOpen(string terminologyName, string language) {
            object[] results = this.Invoke("TerminologyBrowserOpen", new object[] {
                        terminologyName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyBrowserOpenAsync(string terminologyName, string language) {
            this.TerminologyBrowserOpenAsync(terminologyName, language, null);
        }
        
        /// <remarks/>
        public void TerminologyBrowserOpenAsync(string terminologyName, string language, object userState) {
            if ((this.TerminologyBrowserOpenOperationCompleted == null)) {
                this.TerminologyBrowserOpenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyBrowserOpenOperationCompleted);
            }
            this.InvokeAsync("TerminologyBrowserOpen", new object[] {
                        terminologyName,
                        language}, this.TerminologyBrowserOpenOperationCompleted, userState);
        }
        
        private void OnTerminologyBrowserOpenOperationCompleted(object arg) {
            if ((this.TerminologyBrowserOpenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyBrowserOpenCompleted(this, new TerminologyBrowserOpenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyBrowserOpenPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyBrowserOpenPaged(string terminologyName, string language, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyBrowserOpenPaged", new object[] {
                        terminologyName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyBrowserOpenPagedAsync(string terminologyName, string language, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyBrowserOpenPagedAsync(terminologyName, language, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyBrowserOpenPagedAsync(string terminologyName, string language, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyBrowserOpenPagedOperationCompleted == null)) {
                this.TerminologyBrowserOpenPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyBrowserOpenPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyBrowserOpenPaged", new object[] {
                        terminologyName,
                        language,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyBrowserOpenPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyBrowserOpenPagedOperationCompleted(object arg) {
            if ((this.TerminologyBrowserOpenPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyBrowserOpenPagedCompleted(this, new TerminologyBrowserOpenPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyBrowserGoDown", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyBrowserGoDown(string terminologyName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("TerminologyBrowserGoDown", new object[] {
                        terminologyName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyBrowserGoDownAsync(string terminologyName, string language, OTSNodeRef queryNodeId) {
            this.TerminologyBrowserGoDownAsync(terminologyName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void TerminologyBrowserGoDownAsync(string terminologyName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.TerminologyBrowserGoDownOperationCompleted == null)) {
                this.TerminologyBrowserGoDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyBrowserGoDownOperationCompleted);
            }
            this.InvokeAsync("TerminologyBrowserGoDown", new object[] {
                        terminologyName,
                        language,
                        queryNodeId}, this.TerminologyBrowserGoDownOperationCompleted, userState);
        }
        
        private void OnTerminologyBrowserGoDownOperationCompleted(object arg) {
            if ((this.TerminologyBrowserGoDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyBrowserGoDownCompleted(this, new TerminologyBrowserGoDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyBrowserGoDownPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyBrowserGoDownPaged(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyBrowserGoDownPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyBrowserGoDownPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyBrowserGoDownPagedAsync(terminologyName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyBrowserGoDownPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyBrowserGoDownPagedOperationCompleted == null)) {
                this.TerminologyBrowserGoDownPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyBrowserGoDownPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyBrowserGoDownPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyBrowserGoDownPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyBrowserGoDownPagedOperationCompleted(object arg) {
            if ((this.TerminologyBrowserGoDownPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyBrowserGoDownPagedCompleted(this, new TerminologyBrowserGoDownPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyBrowserGoUp", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyBrowserGoUp(string terminologyName, string language, OTSNodeRef queryNodeId) {
            object[] results = this.Invoke("TerminologyBrowserGoUp", new object[] {
                        terminologyName,
                        language,
                        queryNodeId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyBrowserGoUpAsync(string terminologyName, string language, OTSNodeRef queryNodeId) {
            this.TerminologyBrowserGoUpAsync(terminologyName, language, queryNodeId, null);
        }
        
        /// <remarks/>
        public void TerminologyBrowserGoUpAsync(string terminologyName, string language, OTSNodeRef queryNodeId, object userState) {
            if ((this.TerminologyBrowserGoUpOperationCompleted == null)) {
                this.TerminologyBrowserGoUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyBrowserGoUpOperationCompleted);
            }
            this.InvokeAsync("TerminologyBrowserGoUp", new object[] {
                        terminologyName,
                        language,
                        queryNodeId}, this.TerminologyBrowserGoUpOperationCompleted, userState);
        }
        
        private void OnTerminologyBrowserGoUpOperationCompleted(object arg) {
            if ((this.TerminologyBrowserGoUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyBrowserGoUpCompleted(this, new TerminologyBrowserGoUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyBrowserGoUpPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyBrowserGoUpPaged(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyBrowserGoUpPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyBrowserGoUpPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyBrowserGoUpPagedAsync(terminologyName, language, queryNodeId, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyBrowserGoUpPagedAsync(string terminologyName, string language, OTSNodeRef queryNodeId, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyBrowserGoUpPagedOperationCompleted == null)) {
                this.TerminologyBrowserGoUpPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyBrowserGoUpPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyBrowserGoUpPaged", new object[] {
                        terminologyName,
                        language,
                        queryNodeId,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyBrowserGoUpPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyBrowserGoUpPagedOperationCompleted(object arg) {
            if ((this.TerminologyBrowserGoUpPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyBrowserGoUpPagedCompleted(this, new TerminologyBrowserGoUpPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyBrowserTextSearch", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyBrowserTextSearch(string terminologyName, string language, string searchString) {
            object[] results = this.Invoke("TerminologyBrowserTextSearch", new object[] {
                        terminologyName,
                        language,
                        searchString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyBrowserTextSearchAsync(string terminologyName, string language, string searchString) {
            this.TerminologyBrowserTextSearchAsync(terminologyName, language, searchString, null);
        }
        
        /// <remarks/>
        public void TerminologyBrowserTextSearchAsync(string terminologyName, string language, string searchString, object userState) {
            if ((this.TerminologyBrowserTextSearchOperationCompleted == null)) {
                this.TerminologyBrowserTextSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyBrowserTextSearchOperationCompleted);
            }
            this.InvokeAsync("TerminologyBrowserTextSearch", new object[] {
                        terminologyName,
                        language,
                        searchString}, this.TerminologyBrowserTextSearchOperationCompleted, userState);
        }
        
        private void OnTerminologyBrowserTextSearchOperationCompleted(object arg) {
            if ((this.TerminologyBrowserTextSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyBrowserTextSearchCompleted(this, new TerminologyBrowserTextSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/TerminologyBrowserTextSearchPaged", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TerminologyBrowserTextSearchPaged(string terminologyName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, out int totalRows) {
            object[] results = this.Invoke("TerminologyBrowserTextSearchPaged", new object[] {
                        terminologyName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter});
            totalRows = ((int)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TerminologyBrowserTextSearchPagedAsync(string terminologyName, string language, string searchString, int firstRowNum, int numRows, byte termFilter) {
            this.TerminologyBrowserTextSearchPagedAsync(terminologyName, language, searchString, firstRowNum, numRows, termFilter, null);
        }
        
        /// <remarks/>
        public void TerminologyBrowserTextSearchPagedAsync(string terminologyName, string language, string searchString, int firstRowNum, int numRows, byte termFilter, object userState) {
            if ((this.TerminologyBrowserTextSearchPagedOperationCompleted == null)) {
                this.TerminologyBrowserTextSearchPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminologyBrowserTextSearchPagedOperationCompleted);
            }
            this.InvokeAsync("TerminologyBrowserTextSearchPaged", new object[] {
                        terminologyName,
                        language,
                        searchString,
                        firstRowNum,
                        numRows,
                        termFilter}, this.TerminologyBrowserTextSearchPagedOperationCompleted, userState);
        }
        
        private void OnTerminologyBrowserTextSearchPagedOperationCompleted(object arg) {
            if ((this.TerminologyBrowserTextSearchPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminologyBrowserTextSearchPagedCompleted(this, new TerminologyBrowserTextSearchPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetQuerySource", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQuerySource(TerminologyName terminologyName, string queryName, string language) {
            object[] results = this.Invoke("GetQuerySource", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetQuerySourceAsync(TerminologyName terminologyName, string queryName, string language) {
            this.GetQuerySourceAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void GetQuerySourceAsync(TerminologyName terminologyName, string queryName, string language, object userState) {
            if ((this.GetQuerySourceOperationCompleted == null)) {
                this.GetQuerySourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuerySourceOperationCompleted);
            }
            this.InvokeAsync("GetQuerySource", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.GetQuerySourceOperationCompleted, userState);
        }
        
        private void OnGetQuerySourceOperationCompleted(object arg) {
            if ((this.GetQuerySourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuerySourceCompleted(this, new GetQuerySourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetTermsForQueryConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTermsForQueryConcept(TerminologyName terminologyName, string queryName, string language, string conceptId) {
            object[] results = this.Invoke("GetTermsForQueryConcept", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTermsForQueryConceptAsync(TerminologyName terminologyName, string queryName, string language, string conceptId) {
            this.GetTermsForQueryConceptAsync(terminologyName, queryName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void GetTermsForQueryConceptAsync(TerminologyName terminologyName, string queryName, string language, string conceptId, object userState) {
            if ((this.GetTermsForQueryConceptOperationCompleted == null)) {
                this.GetTermsForQueryConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTermsForQueryConceptOperationCompleted);
            }
            this.InvokeAsync("GetTermsForQueryConcept", new object[] {
                        terminologyName,
                        queryName,
                        language,
                        conceptId}, this.GetTermsForQueryConceptOperationCompleted, userState);
        }
        
        private void OnGetTermsForQueryConceptOperationCompleted(object arg) {
            if ((this.GetTermsForQueryConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTermsForQueryConceptCompleted(this, new GetTermsForQueryConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetQueryVersions", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetQueryVersions(TerminologyName terminologyName, string queryName, string language) {
            object[] results = this.Invoke("GetQueryVersions", new object[] {
                        terminologyName,
                        queryName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryVersionsAsync(TerminologyName terminologyName, string queryName, string language) {
            this.GetQueryVersionsAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void GetQueryVersionsAsync(TerminologyName terminologyName, string queryName, string language, object userState) {
            if ((this.GetQueryVersionsOperationCompleted == null)) {
                this.GetQueryVersionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryVersionsOperationCompleted);
            }
            this.InvokeAsync("GetQueryVersions", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.GetQueryVersionsOperationCompleted, userState);
        }
        
        private void OnGetQueryVersionsOperationCompleted(object arg) {
            if ((this.GetQueryVersionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryVersionsCompleted(this, new GetQueryVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/RegisterQuery", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RegisterQuery(TerminologyName terminologyName, System.Xml.XmlNode queryXmlDocument) {
            this.Invoke("RegisterQuery", new object[] {
                        terminologyName,
                        queryXmlDocument});
        }
        
        /// <remarks/>
        public void RegisterQueryAsync(TerminologyName terminologyName, System.Xml.XmlNode queryXmlDocument) {
            this.RegisterQueryAsync(terminologyName, queryXmlDocument, null);
        }
        
        /// <remarks/>
        public void RegisterQueryAsync(TerminologyName terminologyName, System.Xml.XmlNode queryXmlDocument, object userState) {
            if ((this.RegisterQueryOperationCompleted == null)) {
                this.RegisterQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterQueryOperationCompleted);
            }
            this.InvokeAsync("RegisterQuery", new object[] {
                        terminologyName,
                        queryXmlDocument}, this.RegisterQueryOperationCompleted, userState);
        }
        
        private void OnRegisterQueryOperationCompleted(object arg) {
            if ((this.RegisterQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterQueryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/UnRegisterQuery", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnRegisterQuery(TerminologyName terminologyName, string queryName, string language) {
            this.Invoke("UnRegisterQuery", new object[] {
                        terminologyName,
                        queryName,
                        language});
        }
        
        /// <remarks/>
        public void UnRegisterQueryAsync(TerminologyName terminologyName, string queryName, string language) {
            this.UnRegisterQueryAsync(terminologyName, queryName, language, null);
        }
        
        /// <remarks/>
        public void UnRegisterQueryAsync(TerminologyName terminologyName, string queryName, string language, object userState) {
            if ((this.UnRegisterQueryOperationCompleted == null)) {
                this.UnRegisterQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnRegisterQueryOperationCompleted);
            }
            this.InvokeAsync("UnRegisterQuery", new object[] {
                        terminologyName,
                        queryName,
                        language}, this.UnRegisterQueryOperationCompleted, userState);
        }
        
        private void OnUnRegisterQueryOperationCompleted(object arg) {
            if ((this.UnRegisterQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnRegisterQueryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/UnRegisterQueryVersion", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnRegisterQueryVersion(System.Guid queryVersionId) {
            this.Invoke("UnRegisterQueryVersion", new object[] {
                        queryVersionId});
        }
        
        /// <remarks/>
        public void UnRegisterQueryVersionAsync(System.Guid queryVersionId) {
            this.UnRegisterQueryVersionAsync(queryVersionId, null);
        }
        
        /// <remarks/>
        public void UnRegisterQueryVersionAsync(System.Guid queryVersionId, object userState) {
            if ((this.UnRegisterQueryVersionOperationCompleted == null)) {
                this.UnRegisterQueryVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnRegisterQueryVersionOperationCompleted);
            }
            this.InvokeAsync("UnRegisterQueryVersion", new object[] {
                        queryVersionId}, this.UnRegisterQueryVersionOperationCompleted, userState);
        }
        
        private void OnUnRegisterQueryVersionOperationCompleted(object arg) {
            if ((this.UnRegisterQueryVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnRegisterQueryVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/UnRegisterResultSubset", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnRegisterResultSubset(System.Guid resultSubsetId) {
            this.Invoke("UnRegisterResultSubset", new object[] {
                        resultSubsetId});
        }
        
        /// <remarks/>
        public void UnRegisterResultSubsetAsync(System.Guid resultSubsetId) {
            this.UnRegisterResultSubsetAsync(resultSubsetId, null);
        }
        
        /// <remarks/>
        public void UnRegisterResultSubsetAsync(System.Guid resultSubsetId, object userState) {
            if ((this.UnRegisterResultSubsetOperationCompleted == null)) {
                this.UnRegisterResultSubsetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnRegisterResultSubsetOperationCompleted);
            }
            this.InvokeAsync("UnRegisterResultSubset", new object[] {
                        resultSubsetId}, this.UnRegisterResultSubsetOperationCompleted, userState);
        }
        
        private void OnUnRegisterResultSubsetOperationCompleted(object arg) {
            if ((this.UnRegisterResultSubsetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnRegisterResultSubsetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetTermsForConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTermsForConcept(TerminologyName terminologyName, string language, string conceptId) {
            object[] results = this.Invoke("GetTermsForConcept", new object[] {
                        terminologyName,
                        language,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTermsForConceptAsync(TerminologyName terminologyName, string language, string conceptId) {
            this.GetTermsForConceptAsync(terminologyName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void GetTermsForConceptAsync(TerminologyName terminologyName, string language, string conceptId, object userState) {
            if ((this.GetTermsForConceptOperationCompleted == null)) {
                this.GetTermsForConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTermsForConceptOperationCompleted);
            }
            this.InvokeAsync("GetTermsForConcept", new object[] {
                        terminologyName,
                        language,
                        conceptId}, this.GetTermsForConceptOperationCompleted, userState);
        }
        
        private void OnGetTermsForConceptOperationCompleted(object arg) {
            if ((this.GetTermsForConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTermsForConceptCompleted(this, new GetTermsForConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetTerminologyProviderProperties", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetTerminologyProviderProperties(string terminologyProviderName, string language) {
            object[] results = this.Invoke("GetTerminologyProviderProperties", new object[] {
                        terminologyProviderName,
                        language});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTerminologyProviderPropertiesAsync(string terminologyProviderName, string language) {
            this.GetTerminologyProviderPropertiesAsync(terminologyProviderName, language, null);
        }
        
        /// <remarks/>
        public void GetTerminologyProviderPropertiesAsync(string terminologyProviderName, string language, object userState) {
            if ((this.GetTerminologyProviderPropertiesOperationCompleted == null)) {
                this.GetTerminologyProviderPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminologyProviderPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetTerminologyProviderProperties", new object[] {
                        terminologyProviderName,
                        language}, this.GetTerminologyProviderPropertiesOperationCompleted, userState);
        }
        
        private void OnGetTerminologyProviderPropertiesOperationCompleted(object arg) {
            if ((this.GetTerminologyProviderPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminologyProviderPropertiesCompleted(this, new GetTerminologyProviderPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetTerminologyProviderRelationships", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTerminologyProviderRelationships(string terminologyProviderName, string language) {
            object[] results = this.Invoke("GetTerminologyProviderRelationships", new object[] {
                        terminologyProviderName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTerminologyProviderRelationshipsAsync(string terminologyProviderName, string language) {
            this.GetTerminologyProviderRelationshipsAsync(terminologyProviderName, language, null);
        }
        
        /// <remarks/>
        public void GetTerminologyProviderRelationshipsAsync(string terminologyProviderName, string language, object userState) {
            if ((this.GetTerminologyProviderRelationshipsOperationCompleted == null)) {
                this.GetTerminologyProviderRelationshipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminologyProviderRelationshipsOperationCompleted);
            }
            this.InvokeAsync("GetTerminologyProviderRelationships", new object[] {
                        terminologyProviderName,
                        language}, this.GetTerminologyProviderRelationshipsOperationCompleted, userState);
        }
        
        private void OnGetTerminologyProviderRelationshipsOperationCompleted(object arg) {
            if ((this.GetTerminologyProviderRelationshipsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminologyProviderRelationshipsCompleted(this, new GetTerminologyProviderRelationshipsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetTerminologyProviderTermsForConcept", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTerminologyProviderTermsForConcept(string terminologyProviderName, string language, string conceptId) {
            object[] results = this.Invoke("GetTerminologyProviderTermsForConcept", new object[] {
                        terminologyProviderName,
                        language,
                        conceptId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTerminologyProviderTermsForConceptAsync(string terminologyProviderName, string language, string conceptId) {
            this.GetTerminologyProviderTermsForConceptAsync(terminologyProviderName, language, conceptId, null);
        }
        
        /// <remarks/>
        public void GetTerminologyProviderTermsForConceptAsync(string terminologyProviderName, string language, string conceptId, object userState) {
            if ((this.GetTerminologyProviderTermsForConceptOperationCompleted == null)) {
                this.GetTerminologyProviderTermsForConceptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminologyProviderTermsForConceptOperationCompleted);
            }
            this.InvokeAsync("GetTerminologyProviderTermsForConcept", new object[] {
                        terminologyProviderName,
                        language,
                        conceptId}, this.GetTerminologyProviderTermsForConceptOperationCompleted, userState);
        }
        
        private void OnGetTerminologyProviderTermsForConceptOperationCompleted(object arg) {
            if ((this.GetTerminologyProviderTermsForConceptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminologyProviderTermsForConceptCompleted(this, new GetTerminologyProviderTermsForConceptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetTerminologyProviders", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetTerminologyProviders(TerminologyName terminologyName) {
            object[] results = this.Invoke("GetTerminologyProviders", new object[] {
                        terminologyName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTerminologyProvidersAsync(TerminologyName terminologyName) {
            this.GetTerminologyProvidersAsync(terminologyName, null);
        }
        
        /// <remarks/>
        public void GetTerminologyProvidersAsync(TerminologyName terminologyName, object userState) {
            if ((this.GetTerminologyProvidersOperationCompleted == null)) {
                this.GetTerminologyProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminologyProvidersOperationCompleted);
            }
            this.InvokeAsync("GetTerminologyProviders", new object[] {
                        terminologyName}, this.GetTerminologyProvidersOperationCompleted, userState);
        }
        
        private void OnGetTerminologyProvidersOperationCompleted(object arg) {
            if ((this.GetTerminologyProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminologyProvidersCompleted(this, new GetTerminologyProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://oceaninformatics.biz/GetTerminologyRelationships", RequestNamespace="http://oceaninformatics.biz/", ResponseNamespace="http://oceaninformatics.biz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTerminologyRelationships(TerminologyName terminologyName, string language) {
            object[] results = this.Invoke("GetTerminologyRelationships", new object[] {
                        terminologyName,
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTerminologyRelationshipsAsync(TerminologyName terminologyName, string language) {
            this.GetTerminologyRelationshipsAsync(terminologyName, language, null);
        }
        
        /// <remarks/>
        public void GetTerminologyRelationshipsAsync(TerminologyName terminologyName, string language, object userState) {
            if ((this.GetTerminologyRelationshipsOperationCompleted == null)) {
                this.GetTerminologyRelationshipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminologyRelationshipsOperationCompleted);
            }
            this.InvokeAsync("GetTerminologyRelationships", new object[] {
                        terminologyName,
                        language}, this.GetTerminologyRelationshipsOperationCompleted, userState);
        }
        
        private void OnGetTerminologyRelationshipsOperationCompleted(object arg) {
            if ((this.GetTerminologyRelationshipsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminologyRelationshipsCompleted(this, new GetTerminologyRelationshipsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class TerminologyProviderDescription {
        
        private string terminologyProviderNameField;
        
        private string terminologyNameField;
        
        /// <remarks/>
        public string TerminologyProviderName {
            get {
                return this.terminologyProviderNameField;
            }
            set {
                this.terminologyProviderNameField = value;
            }
        }
        
        /// <remarks/>
        public string TerminologyName {
            get {
                return this.terminologyNameField;
            }
            set {
                this.terminologyNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class Term {
        
        private string idField;
        
        private string valueField;
        
        private bool fullySpecifiedNameField;
        
        private bool preferredTermField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public bool FullySpecifiedName {
            get {
                return this.fullySpecifiedNameField;
            }
            set {
                this.fullySpecifiedNameField = value;
            }
        }
        
        /// <remarks/>
        public bool PreferredTerm {
            get {
                return this.preferredTermField;
            }
            set {
                this.preferredTermField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class QueryNavigationNode {
        
        private OTSNodeRef referenceIdField;
        
        private string termIdField;
        
        private string termTextField;
        
        private bool fullySpecifiedNameField;
        
        private bool preferredTermField;
        
        private bool canSelectField;
        
        private bool canNavigateField;
        
        private bool hasChildrenField;
        
        /// <remarks/>
        public OTSNodeRef ReferenceId {
            get {
                return this.referenceIdField;
            }
            set {
                this.referenceIdField = value;
            }
        }
        
        /// <remarks/>
        public string TermId {
            get {
                return this.termIdField;
            }
            set {
                this.termIdField = value;
            }
        }
        
        /// <remarks/>
        public string TermText {
            get {
                return this.termTextField;
            }
            set {
                this.termTextField = value;
            }
        }
        
        /// <remarks/>
        public bool FullySpecifiedName {
            get {
                return this.fullySpecifiedNameField;
            }
            set {
                this.fullySpecifiedNameField = value;
            }
        }
        
        /// <remarks/>
        public bool PreferredTerm {
            get {
                return this.preferredTermField;
            }
            set {
                this.preferredTermField = value;
            }
        }
        
        /// <remarks/>
        public bool CanSelect {
            get {
                return this.canSelectField;
            }
            set {
                this.canSelectField = value;
            }
        }
        
        /// <remarks/>
        public bool CanNavigate {
            get {
                return this.canNavigateField;
            }
            set {
                this.canNavigateField = value;
            }
        }
        
        /// <remarks/>
        public bool HasChildren {
            get {
                return this.hasChildrenField;
            }
            set {
                this.hasChildrenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class OTSNodeRef {
        
        private string idField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class TerminologyMapping {
        
        private string terminologyMappingIdField;
        
        private string terminologyIdField;
        
        private string terminologyNameField;
        
        private string terminologyVersionField;
        
        private string terminologyMappingDescriptionField;
        
        private string terminologyMappingInfoField;
        
        /// <remarks/>
        public string TerminologyMappingId {
            get {
                return this.terminologyMappingIdField;
            }
            set {
                this.terminologyMappingIdField = value;
            }
        }
        
        /// <remarks/>
        public string TerminologyId {
            get {
                return this.terminologyIdField;
            }
            set {
                this.terminologyIdField = value;
            }
        }
        
        /// <remarks/>
        public string TerminologyName {
            get {
                return this.terminologyNameField;
            }
            set {
                this.terminologyNameField = value;
            }
        }
        
        /// <remarks/>
        public string TerminologyVersion {
            get {
                return this.terminologyVersionField;
            }
            set {
                this.terminologyVersionField = value;
            }
        }
        
        /// <remarks/>
        public string TerminologyMappingDescription {
            get {
                return this.terminologyMappingDescriptionField;
            }
            set {
                this.terminologyMappingDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string TerminologyMappingInfo {
            get {
                return this.terminologyMappingInfoField;
            }
            set {
                this.terminologyMappingInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class QueryTreeNode {
        
        private string conceptIdField;
        
        private string parentConceptIdField;
        
        private bool canSelectField;
        
        private bool canNavigateField;
        
        private bool hasChildrenField;
        
        /// <remarks/>
        public string ConceptId {
            get {
                return this.conceptIdField;
            }
            set {
                this.conceptIdField = value;
            }
        }
        
        /// <remarks/>
        public string ParentConceptId {
            get {
                return this.parentConceptIdField;
            }
            set {
                this.parentConceptIdField = value;
            }
        }
        
        /// <remarks/>
        public bool CanSelect {
            get {
                return this.canSelectField;
            }
            set {
                this.canSelectField = value;
            }
        }
        
        /// <remarks/>
        public bool CanNavigate {
            get {
                return this.canNavigateField;
            }
            set {
                this.canNavigateField = value;
            }
        }
        
        /// <remarks/>
        public bool HasChildren {
            get {
                return this.hasChildrenField;
            }
            set {
                this.hasChildrenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SourceSetConceptHierarchyBinding))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SourceSetTerminologyBinding))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SourceSetResultSubsetBinding))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public abstract partial class SourceSetBinding {
        
        private string sourceSetNameField;
        
        /// <remarks/>
        public string SourceSetName {
            get {
                return this.sourceSetNameField;
            }
            set {
                this.sourceSetNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class SourceSetConceptHierarchyBinding : SourceSetBinding {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class SourceSetTerminologyBinding : SourceSetBinding {
        
        private string terminologyProviderNameField;
        
        private string dBConnectionNameField;
        
        /// <remarks/>
        public string TerminologyProviderName {
            get {
                return this.terminologyProviderNameField;
            }
            set {
                this.terminologyProviderNameField = value;
            }
        }
        
        /// <remarks/>
        public string DBConnectionName {
            get {
                return this.dBConnectionNameField;
            }
            set {
                this.dBConnectionNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class SourceSetResultSubsetBinding : SourceSetBinding {
        
        private System.Guid resultSubsetIdField;
        
        private string queryNameField;
        
        private System.Guid queryIdField;
        
        /// <remarks/>
        public System.Guid ResultSubsetId {
            get {
                return this.resultSubsetIdField;
            }
            set {
                this.resultSubsetIdField = value;
            }
        }
        
        /// <remarks/>
        public string QueryName {
            get {
                return this.queryNameField;
            }
            set {
                this.queryNameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid QueryId {
            get {
                return this.queryIdField;
            }
            set {
                this.queryIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public partial class QueryRegistrationView {
        
        private System.DateTime registrationTimeField;
        
        private string idField;
        
        private string terminologyNameField;
        
        private string queryNameField;
        
        private string languageField;
        
        private string descriptionField;
        
        private string cacheModeField;
        
        /// <remarks/>
        public System.DateTime RegistrationTime {
            get {
                return this.registrationTimeField;
            }
            set {
                this.registrationTimeField = value;
            }
        }
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string TerminologyName {
            get {
                return this.terminologyNameField;
            }
            set {
                this.terminologyNameField = value;
            }
        }
        
        /// <remarks/>
        public string QueryName {
            get {
                return this.queryNameField;
            }
            set {
                this.queryNameField = value;
            }
        }
        
        /// <remarks/>
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string CacheMode {
            get {
                return this.cacheModeField;
            }
            set {
                this.cacheModeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public enum CacheMode {
        
        /// <remarks/>
        Transient,
        
        /// <remarks/>
        Permanent,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public enum TraversalDirection {
        
        /// <remarks/>
        SourceToTarget,
        
        /// <remarks/>
        TargetToSource,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://oceaninformatics.biz/")]
    public enum TerminologyName {
        
        /// <remarks/>
        LOINC,
        
        /// <remarks/>
        Snomed,
        
        /// <remarks/>
        FlatList,
        
        /// <remarks/>
        InMemory,
        
        /// <remarks/>
        SubQuery,
        
        /// <remarks/>
        SimpleTree,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTerminologiesCompletedEventHandler(object sender, GetTerminologiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTerminologiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminologiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string defaultTerminology {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetDefaultTerminologyProvidersCompletedEventHandler(object sender, GetDefaultTerminologyProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultTerminologyProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultTerminologyProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TerminologyProviderDescription[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TerminologyProviderDescription[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAllTerminologyProvidersCompletedEventHandler(object sender, GetAllTerminologyProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTerminologyProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTerminologyProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TerminologyProviderDescription[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TerminologyProviderDescription[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetDefaultTerminologyProviderNameCompletedEventHandler(object sender, GetDefaultTerminologyProviderNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultTerminologyProviderNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultTerminologyProviderNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetRegisteredQueriesCompletedEventHandler(object sender, GetRegisteredQueriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegisteredQueriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegisteredQueriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public QueryRegistrationView[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((QueryRegistrationView[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CancelRegistrationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CancelEvaluationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UnRegisterAllQueriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryRegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryRegisterSourceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryIsRegisteredCompletedEventHandler(object sender, QueryIsRegisteredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryIsRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryIsRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryUnRegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionRegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionSaveDefinitionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionRegisterSourceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionUnRegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetUnRegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryImportLatestResultSubsetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryExportLatestResultSubsetCompletedEventHandler(object sender, QueryExportLatestResultSubsetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryExportLatestResultSubsetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryExportLatestResultSubsetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string queryDef {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string resultSubsetDef {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetExportCompletedEventHandler(object sender, ResultSubsetExportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetExportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetExportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string queryDef {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string resultSubsetDef {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryOpenCompletedEventHandler(object sender, QueryOpenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryOpenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryOpenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryOpenPagedCompletedEventHandler(object sender, QueryOpenPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryOpenPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryOpenPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryTermSearchCompletedEventHandler(object sender, QueryTermSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryTermSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryTermSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetFullTermCompletedEventHandler(object sender, TerminologyProviderGetFullTermCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetFullTermCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetFullTermCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryTextSearchCompletedEventHandler(object sender, QueryTextSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryTextSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryTextSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryTextSearchPagedCompletedEventHandler(object sender, QueryTextSearchPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryTextSearchPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryTextSearchPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryTextSearchAnyOrderPagedCompletedEventHandler(object sender, QueryTextSearchAnyOrderPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryTextSearchAnyOrderPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryTextSearchAnyOrderPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGoDownCompletedEventHandler(object sender, QueryGoDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGoDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGoDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGoDownPagedCompletedEventHandler(object sender, QueryGoDownPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGoDownPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGoDownPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGoUpCompletedEventHandler(object sender, QueryGoUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGoUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGoUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGoUpPagedCompletedEventHandler(object sender, QueryGoUpPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGoUpPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGoUpPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGetTermsForConceptCompletedEventHandler(object sender, QueryGetTermsForConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGetTermsForConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGetTermsForConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGetTreeCompletedEventHandler(object sender, QueryGetTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGetTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGetTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public QueryTreeNode[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((QueryTreeNode[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGetLatestResultSubsetIdCompletedEventHandler(object sender, QueryGetLatestResultSubsetIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGetLatestResultSubsetIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGetLatestResultSubsetIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGetLatestVersionIdCompletedEventHandler(object sender, QueryGetLatestVersionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGetLatestVersionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGetLatestVersionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGetVersionsCompletedEventHandler(object sender, QueryGetVersionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGetVersionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGetVersionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryGetSourceCompletedEventHandler(object sender, QueryGetSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryGetSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryGetSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionSetLockedStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionGetDefaultBindingsCompletedEventHandler(object sender, QueryVersionGetDefaultBindingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionGetDefaultBindingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionGetDefaultBindingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SourceSetResultSubsetBinding[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SourceSetResultSubsetBinding[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SourceSetTerminologyBinding[] terminologyBindingArray {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SourceSetTerminologyBinding[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionEvaluateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionOpenCompletedEventHandler(object sender, QueryVersionOpenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionOpenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionOpenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionOpenPagedCompletedEventHandler(object sender, QueryVersionOpenPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionOpenPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionOpenPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionGoDownCompletedEventHandler(object sender, QueryVersionGoDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionGoDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionGoDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionGoDownPagedCompletedEventHandler(object sender, QueryVersionGoDownPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionGoDownPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionGoDownPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionGoUpCompletedEventHandler(object sender, QueryVersionGoUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionGoUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionGoUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionGoUpPagedCompletedEventHandler(object sender, QueryVersionGoUpPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionGoUpPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionGoUpPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionTextSearchCompletedEventHandler(object sender, QueryVersionTextSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionTextSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionTextSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionTextSearchPagedCompletedEventHandler(object sender, QueryVersionTextSearchPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionTextSearchPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionTextSearchPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionTextSearchAnyOrderPagedCompletedEventHandler(object sender, QueryVersionTextSearchAnyOrderPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionTextSearchAnyOrderPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionTextSearchAnyOrderPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionTermSearchCompletedEventHandler(object sender, QueryVersionTermSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionTermSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionTermSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionGetSourceCompletedEventHandler(object sender, QueryVersionGetSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionGetSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionGetSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionGetLatestResultSubsetIdCompletedEventHandler(object sender, QueryVersionGetLatestResultSubsetIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionGetLatestResultSubsetIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionGetLatestResultSubsetIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryVersionGetTermsForConceptCompletedEventHandler(object sender, QueryVersionGetTermsForConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryVersionGetTermsForConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryVersionGetTermsForConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetOpenCompletedEventHandler(object sender, ResultSubsetOpenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetOpenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetOpenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetGoDownCompletedEventHandler(object sender, ResultSubsetGoDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetGoDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetGoDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetGoUpCompletedEventHandler(object sender, ResultSubsetGoUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetGoUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetGoUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetTextSearchCompletedEventHandler(object sender, ResultSubsetTextSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetTextSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetTextSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetGoDownPagedCompletedEventHandler(object sender, ResultSubsetGoDownPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetGoDownPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetGoDownPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetGoUpPagedCompletedEventHandler(object sender, ResultSubsetGoUpPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetGoUpPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetGoUpPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetTextSearchPagedCompletedEventHandler(object sender, ResultSubsetTextSearchPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetTextSearchPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetTextSearchPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetTextSearchAnyOrderPagedCompletedEventHandler(object sender, ResultSubsetTextSearchAnyOrderPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetTextSearchAnyOrderPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetTextSearchAnyOrderPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetOpenPagedCompletedEventHandler(object sender, ResultSubsetOpenPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetOpenPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetOpenPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetTermSearchCompletedEventHandler(object sender, ResultSubsetTermSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetTermSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetTermSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResultSubsetGetTermsForConceptCompletedEventHandler(object sender, ResultSubsetGetTermsForConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResultSubsetGetTermsForConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResultSubsetGetTermsForConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyOpenCompletedEventHandler(object sender, TerminologyOpenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyOpenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyOpenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyOpenPagedCompletedEventHandler(object sender, TerminologyOpenPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyOpenPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyOpenPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGoDownCompletedEventHandler(object sender, TerminologyGoDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGoDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGoDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGoDownPagedCompletedEventHandler(object sender, TerminologyGoDownPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGoDownPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGoDownPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGoUpCompletedEventHandler(object sender, TerminologyGoUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGoUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGoUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGoUpPagedCompletedEventHandler(object sender, TerminologyGoUpPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGoUpPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGoUpPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyTextSearchCompletedEventHandler(object sender, TerminologyTextSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyTextSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyTextSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyTextSearchPagedCompletedEventHandler(object sender, TerminologyTextSearchPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyTextSearchPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyTextSearchPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetConceptDetailsCompletedEventHandler(object sender, TerminologyGetConceptDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetConceptDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetConceptDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetConceptsAndPropertiesCompletedEventHandler(object sender, TerminologyGetConceptsAndPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetConceptsAndPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetConceptsAndPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetConceptForTermCompletedEventHandler(object sender, TerminologyGetConceptForTermCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetConceptForTermCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetConceptForTermCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyRelationshipGoDownCompletedEventHandler(object sender, TerminologyRelationshipGoDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyRelationshipGoDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyRelationshipGoDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyRelationshipGoDownPagedCompletedEventHandler(object sender, TerminologyRelationshipGoDownPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyRelationshipGoDownPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyRelationshipGoDownPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyRelationshipGoUpCompletedEventHandler(object sender, TerminologyRelationshipGoUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyRelationshipGoUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyRelationshipGoUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyRelationshipGoUpPagedCompletedEventHandler(object sender, TerminologyRelationshipGoUpPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyRelationshipGoUpPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyRelationshipGoUpPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetTraversalDirectionCompletedEventHandler(object sender, TerminologyGetTraversalDirectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetTraversalDirectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetTraversalDirectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TraversalDirection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TraversalDirection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetRelationshipsCompletedEventHandler(object sender, TerminologyGetRelationshipsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetRelationshipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetRelationshipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetConceptRegExpMaskCompletedEventHandler(object sender, TerminologyGetConceptRegExpMaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetConceptRegExpMaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetConceptRegExpMaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetPropertiesCompletedEventHandler(object sender, TerminologyGetPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetLanguagesCompletedEventHandler(object sender, TerminologyGetLanguagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetTerminologyProvidersCompletedEventHandler(object sender, TerminologyGetTerminologyProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetTerminologyProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetTerminologyProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetAllTerminologyMappingsCompletedEventHandler(object sender, TerminologyGetAllTerminologyMappingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetAllTerminologyMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetAllTerminologyMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TerminologyMapping[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TerminologyMapping[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetConceptMappingsCompletedEventHandler(object sender, TerminologyGetConceptMappingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetConceptMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetConceptMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetFullTermsForConceptCompletedEventHandler(object sender, TerminologyGetFullTermsForConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetFullTermsForConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetFullTermsForConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetFullTermCompletedEventHandler(object sender, TerminologyGetFullTermCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetFullTermCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetFullTermCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetTermsForConceptCompletedEventHandler(object sender, TerminologyGetTermsForConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetTermsForConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetTermsForConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetPreferredTermsCompletedEventHandler(object sender, TerminologyGetPreferredTermsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetPreferredTermsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetPreferredTermsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyGetPreferredTermTextCompletedEventHandler(object sender, TerminologyGetPreferredTermTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyGetPreferredTermTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyGetPreferredTermTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyIsTermInTermHierarchyCompletedEventHandler(object sender, TerminologyIsTermInTermHierarchyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyIsTermInTermHierarchyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyIsTermInTermHierarchyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyIsTermInConceptHierarchyCompletedEventHandler(object sender, TerminologyIsTermInConceptHierarchyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyIsTermInConceptHierarchyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyIsTermInConceptHierarchyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyIsConceptInConceptHierarchyCompletedEventHandler(object sender, TerminologyIsConceptInConceptHierarchyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyIsConceptInConceptHierarchyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyIsConceptInConceptHierarchyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGoDownCompletedEventHandler(object sender, TerminologyProviderGoDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGoDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGoDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGoDownPagedCompletedEventHandler(object sender, TerminologyProviderGoDownPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGoDownPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGoDownPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGoUpCompletedEventHandler(object sender, TerminologyProviderGoUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGoUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGoUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGoUpPagedCompletedEventHandler(object sender, TerminologyProviderGoUpPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGoUpPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGoUpPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderRelationshipGoDownCompletedEventHandler(object sender, TerminologyProviderRelationshipGoDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderRelationshipGoDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderRelationshipGoDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderRelationshipGoDownPagedCompletedEventHandler(object sender, TerminologyProviderRelationshipGoDownPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderRelationshipGoDownPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderRelationshipGoDownPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderRelationshipGoUpCompletedEventHandler(object sender, TerminologyProviderRelationshipGoUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderRelationshipGoUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderRelationshipGoUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderRelationshipGoUpPagedCompletedEventHandler(object sender, TerminologyProviderRelationshipGoUpPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderRelationshipGoUpPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderRelationshipGoUpPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderOpenCompletedEventHandler(object sender, TerminologyProviderOpenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderOpenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderOpenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderOpenPagedCompletedEventHandler(object sender, TerminologyProviderOpenPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderOpenPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderOpenPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetConceptDetailsCompletedEventHandler(object sender, TerminologyProviderGetConceptDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetConceptDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetConceptDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetConceptsAndPropertiesCompletedEventHandler(object sender, TerminologyProviderGetConceptsAndPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetConceptsAndPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetConceptsAndPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetConceptForTermCompletedEventHandler(object sender, TerminologyProviderGetConceptForTermCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetConceptForTermCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetConceptForTermCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetLanguagesCompletedEventHandler(object sender, TerminologyProviderGetLanguagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderTextSearchCompletedEventHandler(object sender, TerminologyProviderTextSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderTextSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderTextSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderTextSearchPagedCompletedEventHandler(object sender, TerminologyProviderTextSearchPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderTextSearchPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderTextSearchPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetTermsForConceptCompletedEventHandler(object sender, TerminologyProviderGetTermsForConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetTermsForConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetTermsForConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetConceptMappingsCompletedEventHandler(object sender, TerminologyProviderGetConceptMappingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetConceptMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetConceptMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetFullTermsForConceptCompletedEventHandler(object sender, TerminologyProviderGetFullTermsForConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetFullTermsForConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetFullTermsForConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetPreferredTermTextCompletedEventHandler(object sender, TerminologyProviderGetPreferredTermTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetPreferredTermTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetPreferredTermTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetRelationshipsCompletedEventHandler(object sender, TerminologyProviderGetRelationshipsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetRelationshipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetRelationshipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderGetPropertiesCompletedEventHandler(object sender, TerminologyProviderGetPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderGetPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderGetPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderIsTermInTermHierarchyCompletedEventHandler(object sender, TerminologyProviderIsTermInTermHierarchyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderIsTermInTermHierarchyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderIsTermInTermHierarchyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderIsTermInConceptHierarchyCompletedEventHandler(object sender, TerminologyProviderIsTermInConceptHierarchyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderIsTermInConceptHierarchyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderIsTermInConceptHierarchyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyProviderIsConceptInConceptHierarchyCompletedEventHandler(object sender, TerminologyProviderIsConceptInConceptHierarchyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyProviderIsConceptInConceptHierarchyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyProviderIsConceptInConceptHierarchyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void dummyQueryNavigationNodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsAvailableCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UserNameCompletedEventHandler(object sender, UserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UserDomainNameCompletedEventHandler(object sender, UserDomainNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserDomainNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserDomainNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void OpenQueryCompletedEventHandler(object sender, OpenQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void OpenQueryPagedCompletedEventHandler(object sender, OpenQueryPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenQueryPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenQueryPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GoDownCompletedEventHandler(object sender, GoDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GoDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GoDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GoDownPagedCompletedEventHandler(object sender, GoDownPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GoDownPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GoDownPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GoUpCompletedEventHandler(object sender, GoUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GoUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GoUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GoUpPagedCompletedEventHandler(object sender, GoUpPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GoUpPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GoUpPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TextSearchCompletedEventHandler(object sender, TextSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TextSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TextSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TextSearchPagedCompletedEventHandler(object sender, TextSearchPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TextSearchPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TextSearchPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyBrowserGetConceptDetailsCompletedEventHandler(object sender, TerminologyBrowserGetConceptDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyBrowserGetConceptDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyBrowserGetConceptDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyBrowserOpenCompletedEventHandler(object sender, TerminologyBrowserOpenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyBrowserOpenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyBrowserOpenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyBrowserOpenPagedCompletedEventHandler(object sender, TerminologyBrowserOpenPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyBrowserOpenPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyBrowserOpenPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyBrowserGoDownCompletedEventHandler(object sender, TerminologyBrowserGoDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyBrowserGoDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyBrowserGoDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyBrowserGoDownPagedCompletedEventHandler(object sender, TerminologyBrowserGoDownPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyBrowserGoDownPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyBrowserGoDownPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyBrowserGoUpCompletedEventHandler(object sender, TerminologyBrowserGoUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyBrowserGoUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyBrowserGoUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyBrowserGoUpPagedCompletedEventHandler(object sender, TerminologyBrowserGoUpPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyBrowserGoUpPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyBrowserGoUpPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyBrowserTextSearchCompletedEventHandler(object sender, TerminologyBrowserTextSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyBrowserTextSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyBrowserTextSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TerminologyBrowserTextSearchPagedCompletedEventHandler(object sender, TerminologyBrowserTextSearchPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminologyBrowserTextSearchPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminologyBrowserTextSearchPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetQuerySourceCompletedEventHandler(object sender, GetQuerySourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuerySourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuerySourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTermsForQueryConceptCompletedEventHandler(object sender, GetTermsForQueryConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTermsForQueryConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTermsForQueryConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetQueryVersionsCompletedEventHandler(object sender, GetQueryVersionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryVersionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryVersionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RegisterQueryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UnRegisterQueryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UnRegisterQueryVersionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UnRegisterResultSubsetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTermsForConceptCompletedEventHandler(object sender, GetTermsForConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTermsForConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTermsForConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTerminologyProviderPropertiesCompletedEventHandler(object sender, GetTerminologyProviderPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTerminologyProviderPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminologyProviderPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTerminologyProviderRelationshipsCompletedEventHandler(object sender, GetTerminologyProviderRelationshipsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTerminologyProviderRelationshipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminologyProviderRelationshipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTerminologyProviderTermsForConceptCompletedEventHandler(object sender, GetTerminologyProviderTermsForConceptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTerminologyProviderTermsForConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminologyProviderTermsForConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTerminologyProvidersCompletedEventHandler(object sender, GetTerminologyProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTerminologyProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminologyProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTerminologyRelationshipsCompletedEventHandler(object sender, GetTerminologyRelationshipsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTerminologyRelationshipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminologyRelationshipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591